{"ast":null,"code":"import { toCalendarDate as $7UzoM$toCalendarDate, toCalendarDateTime as $7UzoM$toCalendarDateTime, DateFormatter as $7UzoM$DateFormatter, Time as $7UzoM$Time, toCalendar as $7UzoM$toCalendar, now as $7UzoM$now, GregorianCalendar as $7UzoM$GregorianCalendar, getMinimumMonthInYear as $7UzoM$getMinimumMonthInYear, getMinimumDayInMonth as $7UzoM$getMinimumDayInMonth, toTime as $7UzoM$toTime, today as $7UzoM$today, getLocalTimeZone as $7UzoM$getLocalTimeZone } from \"@internationalized/date\";\nimport { useControlledState as $7UzoM$useControlledState } from \"@react-stately/utils\";\nimport { useOverlayTriggerState as $7UzoM$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useState as $7UzoM$useState, useRef as $7UzoM$useRef, useMemo as $7UzoM$useMemo, useEffect as $7UzoM$useEffect } from \"react\";\nimport { MessageDictionary as $7UzoM$MessageDictionary } from \"@internationalized/message\";\n\nfunction $35a22f14a1f04b11$export$eac50920cf2fd59a(value, minValue, maxValue) {\n  return value != null && (minValue != null && value.compare(minValue) < 0 || maxValue != null && value.compare(maxValue) > 0);\n}\n\nconst $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nfunction $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {\n  fieldOptions = { ...$35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS,\n    ...fieldOptions\n  };\n  let granularity = options.granularity || 'minute';\n  let keys = Object.keys(fieldOptions);\n\n  var _maxGranularity;\n\n  let startIdx = keys.indexOf((_maxGranularity = options.maxGranularity) !== null && _maxGranularity !== void 0 ? _maxGranularity : 'year');\n  if (startIdx < 0) startIdx = 0;\n  let endIdx = keys.indexOf(granularity);\n  if (endIdx < 0) endIdx = 2;\n  if (startIdx > endIdx) throw new Error('maxGranularity must be greater than granularity');\n  let opts1 = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {\n    opts[key] = fieldOptions[key];\n    return opts;\n  }, {});\n  if (options.hourCycle != null) opts1.hour12 = options.hourCycle === 12;\n  opts1.timeZone = options.timeZone || 'UTC';\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  if (hasTime && options.timeZone && !options.hideTimeZone) opts1.timeZoneName = 'short';\n  if (options.showEra && startIdx === 0) opts1.era = 'short';\n  return opts1;\n}\n\nfunction $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {\n  if (placeholderValue && 'hour' in placeholderValue) return placeholderValue;\n  return new $7UzoM$Time();\n}\n\nfunction $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {\n  if (value === null) return null;\n  if (!value) return undefined;\n  return $7UzoM$toCalendar(value, calendar);\n}\n\nfunction $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {\n  if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);\n  let date = $7UzoM$toCalendar($7UzoM$now(timeZone).set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  }), calendar);\n  if (granularity === 'year' || granularity === 'month' || granularity === 'day') return $7UzoM$toCalendarDate(date);\n  if (!timeZone) return $7UzoM$toCalendarDateTime(date);\n  return date;\n}\n\nfunction $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {\n  // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n  let lastValue = $7UzoM$useRef(v);\n  if (v) lastValue.current = v;\n  v = lastValue.current;\n  let defaultTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;\n  granularity = granularity || (v && 'minute' in v ? 'minute' : 'day'); // props.granularity must actually exist in the value if one is provided.\n\n  if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  return [granularity, defaultTimeZone];\n}\n\nfunction $ab5bf3f618090389$export$87194bb378cc3ac2(props) {\n  var ref;\n  let overlayState = $7UzoM$useOverlayTriggerState(props);\n  let [value, setValue] = $7UzoM$useControlledState(props.value, props.defaultValue || null, props.onChange);\n  let v = value || props.placeholderValue;\n  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second' || granularity === 'millisecond';\n\n  var _shouldCloseOnSelect;\n\n  let shouldCloseOnSelect = (_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _shouldCloseOnSelect !== void 0 ? _shouldCloseOnSelect : true;\n  let [selectedDate, setSelectedDate] = $7UzoM$useState(null);\n  let [selectedTime, setSelectedTime] = $7UzoM$useState(null);\n\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) selectedTime = value;\n  } // props.granularity must actually exist in the value if one is provided.\n\n\n  if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n\n  let commitValue = (date, time) => {\n    setValue('timeZone' in time ? time.set($7UzoM$toCalendarDate(date)) : $7UzoM$toCalendarDateTime(date, time));\n  }; // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n\n\n  let selectDate = newValue => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n\n    if (hasTime) {\n      if (selectedTime || shouldClose) commitValue(newValue, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue));else setSelectedDate(newValue);\n    } else setValue(newValue);\n\n    if (shouldClose) overlayState.setOpen(false);\n  };\n\n  let selectTime = newValue => {\n    if (selectedDate) commitValue(selectedDate, newValue);else setSelectedTime(newValue);\n  };\n\n  let validationState = props.validationState || ($35a22f14a1f04b11$export$eac50920cf2fd59a(value, props.minValue, props.maxValue) ? 'invalid' : null) || (value && ((ref = props.isDateUnavailable) === null || ref === void 0 ? void 0 : ref.call(props, value)) ? 'invalid' : null);\n  return {\n    value: value,\n    setValue: setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity: granularity,\n    hasTime: hasTime,\n    isOpen: overlayState.isOpen,\n\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue));\n      overlayState.setOpen(isOpen);\n    },\n\n    validationState: validationState,\n\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) return '';\n      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {\n        granularity: granularity,\n        timeZone: defaultTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: value.calendar.identifier === 'gregory' && value.era === 'BC'\n      });\n      let formatter = new $7UzoM$DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n\n  };\n} // These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\n\n\nconst $3e3ed55ab2966714$var$placeholders = new $7UzoM$MessageDictionary({\n  ach: {\n    year: 'mwaka',\n    month: 'dwe',\n    day: 'nino'\n  },\n  af: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'dd'\n  },\n  am: {\n    year: 'ዓዓዓዓ',\n    month: 'ሚሜ',\n    day: 'ቀቀ'\n  },\n  an: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  ar: {\n    year: 'سنة',\n    month: 'شهر',\n    day: 'يوم'\n  },\n  ast: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  az: {\n    year: 'iiii',\n    month: 'aa',\n    day: 'gg'\n  },\n  be: {\n    year: 'гггг',\n    month: 'мм',\n    day: 'дд'\n  },\n  bg: {\n    year: 'гггг',\n    month: 'мм',\n    day: 'дд'\n  },\n  bn: {\n    year: 'yyyy',\n    month: 'মিমি',\n    day: 'dd'\n  },\n  br: {\n    year: 'bbbb',\n    month: 'mm',\n    day: 'dd'\n  },\n  bs: {\n    year: 'gggg',\n    month: 'mm',\n    day: 'dd'\n  },\n  ca: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  cak: {\n    year: 'jjjj',\n    month: 'ii',\n    day: \"q'q'\"\n  },\n  ckb: {\n    year: 'ساڵ',\n    month: 'مانگ',\n    day: 'ڕۆژ'\n  },\n  cs: {\n    year: 'rrrr',\n    month: 'mm',\n    day: 'dd'\n  },\n  cy: {\n    year: 'bbbb',\n    month: 'mm',\n    day: 'dd'\n  },\n  da: {\n    year: 'åååå',\n    month: 'mm',\n    day: 'dd'\n  },\n  de: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'tt'\n  },\n  dsb: {\n    year: 'llll',\n    month: 'mm',\n    day: 'źź'\n  },\n  el: {\n    year: 'εεεε',\n    month: 'μμ',\n    day: 'ηη'\n  },\n  en: {\n    year: 'yyyy',\n    month: 'mm',\n    day: 'dd'\n  },\n  eo: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'tt'\n  },\n  es: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  et: {\n    year: 'aaaa',\n    month: 'kk',\n    day: 'pp'\n  },\n  eu: {\n    year: 'uuuu',\n    month: 'hh',\n    day: 'ee'\n  },\n  fa: {\n    year: 'سال',\n    month: 'ماه',\n    day: 'روز'\n  },\n  ff: {\n    year: 'hhhh',\n    month: 'll',\n    day: 'ññ'\n  },\n  fi: {\n    year: 'vvvv',\n    month: 'kk',\n    day: 'pp'\n  },\n  fr: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'jj'\n  },\n  fy: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'dd'\n  },\n  ga: {\n    year: 'bbbb',\n    month: 'mm',\n    day: 'll'\n  },\n  gd: {\n    year: 'bbbb',\n    month: 'mm',\n    day: 'll'\n  },\n  gl: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  he: {\n    year: 'שנה',\n    month: 'חודש',\n    day: 'יום'\n  },\n  hr: {\n    year: 'gggg',\n    month: 'mm',\n    day: 'dd'\n  },\n  hsb: {\n    year: 'llll',\n    month: 'mm',\n    day: 'dd'\n  },\n  hu: {\n    year: 'éééé',\n    month: 'hh',\n    day: 'nn'\n  },\n  ia: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  id: {\n    year: 'tttt',\n    month: 'bb',\n    day: 'hh'\n  },\n  it: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'gg'\n  },\n  ja: {\n    year: ' 年 ',\n    month: '月',\n    day: '日'\n  },\n  ka: {\n    year: 'წწწწ',\n    month: 'თთ',\n    day: 'რრ'\n  },\n  kk: {\n    year: 'жжжж',\n    month: 'аа',\n    day: 'кк'\n  },\n  kn: {\n    year: 'ವವವವ',\n    month: 'ಮಿಮೀ',\n    day: 'ದಿದಿ'\n  },\n  ko: {\n    year: '연도',\n    month: '월',\n    day: '일'\n  },\n  lb: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'dd'\n  },\n  lo: {\n    year: 'ປປປປ',\n    month: 'ດດ',\n    day: 'ວວ'\n  },\n  lt: {\n    year: 'mmmm',\n    month: 'mm',\n    day: 'dd'\n  },\n  lv: {\n    year: 'gggg',\n    month: 'mm',\n    day: 'dd'\n  },\n  meh: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  ml: {\n    year: 'വർഷം',\n    month: 'മാസം',\n    day: 'തീയതി'\n  },\n  ms: {\n    year: 'tttt',\n    month: 'mm',\n    day: 'hh'\n  },\n  nl: {\n    year: 'jjjj',\n    month: 'mm',\n    day: 'dd'\n  },\n  nn: {\n    year: 'åååå',\n    month: 'mm',\n    day: 'dd'\n  },\n  no: {\n    year: 'åååå',\n    month: 'mm',\n    day: 'dd'\n  },\n  oc: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'jj'\n  },\n  pl: {\n    year: 'rrrr',\n    month: 'mm',\n    day: 'dd'\n  },\n  pt: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  rm: {\n    year: 'oooo',\n    month: 'mm',\n    day: 'dd'\n  },\n  ro: {\n    year: 'aaaa',\n    month: 'll',\n    day: 'zz'\n  },\n  ru: {\n    year: 'гггг',\n    month: 'мм',\n    day: 'дд'\n  },\n  sc: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'dd'\n  },\n  scn: {\n    year: 'aaaa',\n    month: 'mm',\n    day: 'jj'\n  },\n  sk: {\n    year: 'rrrr',\n    month: 'mm',\n    day: 'dd'\n  },\n  sl: {\n    year: 'llll',\n    month: 'mm',\n    day: 'dd'\n  },\n  sr: {\n    year: 'гггг',\n    month: 'мм',\n    day: 'дд'\n  },\n  sv: {\n    year: 'åååå',\n    month: 'mm',\n    day: 'dd'\n  },\n  szl: {\n    year: 'rrrr',\n    month: 'mm',\n    day: 'dd'\n  },\n  tg: {\n    year: 'сссс',\n    month: 'мм',\n    day: 'рр'\n  },\n  th: {\n    year: 'ปปปป',\n    month: 'ดด',\n    day: 'วว'\n  },\n  tr: {\n    year: 'yyyy',\n    month: 'aa',\n    day: 'gg'\n  },\n  uk: {\n    year: 'рррр',\n    month: 'мм',\n    day: 'дд'\n  },\n  'zh-CN': {\n    year: '年',\n    month: '月',\n    day: '日'\n  },\n  'zh-TW': {\n    year: '年',\n    month: '月',\n    day: '日'\n  }\n}, 'en');\n\nfunction $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {\n  // Use the actual placeholder value for the era and day period fields.\n  if (field === 'era' || field === 'dayPeriod') return value;\n  if (field === 'year' || field === 'month' || field === 'day') return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale); // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n\n  return '––';\n}\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n}; // Node seems to convert everything to lowercase...\n\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n  let {\n    locale: locale,\n    createCalendar: createCalendar,\n    hideTimeZone: hideTimeZone,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  } = props;\n  let v1 = props.value || props.defaultValue || props.placeholderValue;\n  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v1, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC'; // props.granularity must actually exist in the value if one is provided.\n\n  if (v1 && !(granularity in v1)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v1.toString());\n  let defaultFormatter = $7UzoM$useMemo(() => new $7UzoM$DateFormatter(locale), [locale]);\n  let calendar = $7UzoM$useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n  let [value1, setDate] = $7UzoM$useControlledState(props.value, props.defaultValue, props.onChange);\n  let calendarValue = $7UzoM$useMemo(() => $35a22f14a1f04b11$export$61a490a80c552550(value1, calendar), [value1, calendar]); // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n\n  let [placeholderDate, setPlaceholderDate] = $7UzoM$useState(() => $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n\n  var _maxGranularity;\n\n  let formatOpts = $7UzoM$useMemo(() => ({\n    granularity: granularity,\n    maxGranularity: (_maxGranularity = props.maxGranularity) !== null && _maxGranularity !== void 0 ? _maxGranularity : 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone: hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra: showEra\n  }), [props.maxGranularity, granularity, props.hourCycle, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = $7UzoM$useMemo(() => $35a22f14a1f04b11$export$7e319ea407e63bc0({}, formatOpts), [formatOpts]);\n  let dateFormatter = $7UzoM$useMemo(() => new $7UzoM$DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = $7UzoM$useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]); // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n\n  let allSegments = $7UzoM$useMemo(() => dateFormatter.formatToParts(new Date()).filter(seg => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [dateFormatter]);\n  let [validSegments, setValidSegments] = $7UzoM$useState(() => props.value || props.defaultValue ? { ...allSegments\n  } : {}); // Reset placeholder when calendar changes\n\n  let lastCalendarIdentifier = $7UzoM$useRef(calendar.identifier);\n  $7UzoM$useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder => Object.keys(validSegments).length > 0 ? $7UzoM$toCalendar(placeholder, calendar) : $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]); // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n\n  if (value1 && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = { ...allSegments\n    };\n    setValidSegments(validSegments);\n  } // If the value is set to null and all segments are valid, reset the placeholder.\n\n\n  if (value1 == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate($35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  } // If all segments are valid, use the date from state, otherwise use the placeholder date.\n\n\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n\n  let setValue = newValue => {\n    if (props.isDisabled || props.isReadOnly) return;\n\n    if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = $7UzoM$toCalendar(newValue, (v1 === null || v1 === void 0 ? void 0 : v1.calendar) || new $7UzoM$GregorianCalendar());\n      setDate(newValue);\n    } else setPlaceholderDate(newValue);\n  };\n\n  let dateValue = $7UzoM$useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = $7UzoM$useMemo(() => dateFormatter.formatToParts(dateValue).map(segment => {\n    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n    if (segment.type === 'era' && calendar.getEras().length === 1) isEditable = false;\n    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(segment.type, segment.value, locale) : null;\n    return {\n      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n      text: isPlaceholder ? placeholder : segment.value,\n      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n      isPlaceholder: isPlaceholder,\n      placeholder: placeholder,\n      isEditable: isEditable\n    };\n  }), [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]); // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({ ...validSegments\n    });\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({ ...validSegments\n    });\n  }\n\n  let markValid = part => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) validSegments.era = true;\n    setValidSegments({ ...validSegments\n    });\n  };\n\n  let adjustSegment = (type, amount) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      if (Object.keys(validSegments).length >= Object.keys(allSegments).length) setValue(displayValue);\n    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n  };\n\n  let validationState = props.validationState || ($35a22f14a1f04b11$export$eac50920cf2fd59a(calendarValue, props.minValue, props.maxValue) ? 'invalid' : null);\n\n  var _maxGranularity1;\n\n  return {\n    value: calendarValue,\n    dateValue: dateValue,\n    calendar: calendar,\n    setValue: setValue,\n    segments: segments,\n    dateFormatter: dateFormatter,\n    validationState: validationState,\n    granularity: granularity,\n    maxGranularity: (_maxGranularity1 = props.maxGranularity) !== null && _maxGranularity1 !== void 0 ? _maxGranularity1 : 'year',\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n\n    incrementPage(part) {\n      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n    },\n\n    decrementPage(part) {\n      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n    },\n\n    setSegment(part, v) {\n      markValid(part);\n      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n    },\n\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) return; // Confirm the placeholder if only the day period is not filled in.\n\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = { ...allSegments\n        };\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n\n    clearSegment(part) {\n      delete validSegments[part];\n      setValidSegments({ ...validSegments\n      });\n      let placeholder = $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue; // Reset day period to default without changing the hour.\n\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) value = displayValue.set({\n          hour: displayValue.hour - 12\n        });else if (!isPM && shouldBePM) value = displayValue.set({\n          hour: displayValue.hour + 12\n        });\n      } else if (part in displayValue) value = displayValue.set({\n        [part]: placeholder[part]\n      });\n\n      setDate(null);\n      setValue(value);\n    },\n\n    formatValue(fieldOptions) {\n      if (!calendarValue) return '';\n      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, formatOpts);\n      let formatter = new $7UzoM$DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n\n  };\n}\n\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n  switch (type) {\n    case 'era':\n      {\n        let eras = date.calendar.getEras();\n        return {\n          value: eras.indexOf(date.era),\n          minValue: 0,\n          maxValue: eras.length - 1\n        };\n      }\n\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n\n    case 'month':\n      return {\n        value: date.month,\n        minValue: $7UzoM$getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n\n    case 'day':\n      return {\n        value: date.day,\n        minValue: $7UzoM$getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) switch (type) {\n    case 'dayPeriod':\n      return {\n        value: date.hour >= 12 ? 12 : 0,\n        minValue: 0,\n        maxValue: 12\n      };\n\n    case 'hour':\n      if (options.hour12) {\n        let isPM = date.hour >= 12;\n        return {\n          value: date.hour,\n          minValue: isPM ? 12 : 0,\n          maxValue: isPM ? 23 : 11\n        };\n      }\n\n      return {\n        value: date.hour,\n        minValue: 0,\n        maxValue: 23\n      };\n\n    case 'minute':\n      return {\n        value: date.minute,\n        minValue: 0,\n        maxValue: 59\n      };\n\n    case 'second':\n      return {\n        value: date.second,\n        minValue: 0,\n        maxValue: 59\n      };\n  }\n  return {};\n}\n\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {\n        round: part === 'year'\n      });\n  }\n\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({\n          hour: isPM ? hours - 12 : hours + 12\n        });\n      }\n\n    case 'hour':\n    case 'minute':\n    case 'second':\n      return value.cycle(part, amount, {\n        round: part !== 'hour',\n        hourCycle: options.hour12 ? 12 : 24\n      });\n  }\n}\n\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) return value;\n        return value.set({\n          hour: wasPM ? hours - 12 : hours + 12\n        });\n      }\n\n    case 'hour':\n      // In 12 hour time, ensure that AM/PM does not change\n      if (options.hour12) {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        if (!wasPM && segmentValue === 12) segmentValue = 0;\n        if (wasPM && segmentValue < 12) segmentValue += 12;\n      }\n\n    // fallthrough\n\n    case 'minute':\n    case 'second':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n}\n\nfunction $93c38a5e28be6249$export$e50a61c1de9f574(props) {\n  var ref, ref1;\n  let overlayState = $7UzoM$useOverlayTriggerState(props);\n  let [controlledValue, setControlledValue] = $7UzoM$useControlledState(props.value, props.defaultValue || null, props.onChange);\n  let [placeholderValue, setPlaceholderValue] = $7UzoM$useState(() => controlledValue || {\n    start: null,\n    end: null\n  }); // Reset the placeholder if the value prop is set to null.\n\n  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n    placeholderValue = {\n      start: null,\n      end: null\n    };\n    setPlaceholderValue(placeholderValue);\n  }\n\n  let value1 = controlledValue || placeholderValue;\n\n  let setValue = value => {\n    setPlaceholderValue(value);\n    if ((value === null || value === void 0 ? void 0 : value.start) && value.end) setControlledValue(value);else setControlledValue(null);\n  };\n\n  let v = (value1 === null || value1 === void 0 ? void 0 : value1.start) || (value1 === null || value1 === void 0 ? void 0 : value1.end) || props.placeholderValue;\n  let [granularity] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second' || granularity === 'millisecond';\n\n  var _shouldCloseOnSelect;\n\n  let shouldCloseOnSelect = (_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _shouldCloseOnSelect !== void 0 ? _shouldCloseOnSelect : true;\n  let [dateRange1, setSelectedDateRange] = $7UzoM$useState(null);\n  let [timeRange1, setSelectedTimeRange] = $7UzoM$useState(null);\n\n  if (value1 && value1.start && value1.end) {\n    dateRange1 = value1;\n    if ('hour' in value1.start) timeRange1 = value1;\n  }\n\n  let commitValue = (dateRange, timeRange) => {\n    setValue({\n      start: 'timeZone' in timeRange.start ? timeRange.start.set($7UzoM$toCalendarDate(dateRange.start)) : $7UzoM$toCalendarDateTime(dateRange.start, timeRange.start),\n      end: 'timeZone' in timeRange.end ? timeRange.end.set($7UzoM$toCalendarDate(dateRange.end)) : $7UzoM$toCalendarDateTime(dateRange.end, timeRange.end)\n    });\n  }; // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n\n\n  let setDateRange = range => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n\n    if (hasTime) {\n      if (shouldClose || range.start && range.end && (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) && (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end)) commitValue(range, {\n        start: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue),\n        end: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue)\n      });else setSelectedDateRange(range);\n    } else if (range.start && range.end) setValue(range);else setSelectedDateRange(range);\n\n    if (shouldClose) overlayState.setOpen(false);\n  };\n\n  let setTimeRange = range => {\n    if ((dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.start) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.end) && range.start && range.end) commitValue(dateRange1, range);else setSelectedTimeRange(range);\n  };\n\n  let validationState = props.validationState || (value1 != null && ($35a22f14a1f04b11$export$eac50920cf2fd59a(value1.start, props.minValue, props.maxValue) || $35a22f14a1f04b11$export$eac50920cf2fd59a(value1.end, props.minValue, props.maxValue) || value1.end != null && value1.start != null && value1.end.compare(value1.start) < 0 || (value1 === null || value1 === void 0 ? void 0 : value1.start) && ((ref = props.isDateUnavailable) === null || ref === void 0 ? void 0 : ref.call(props, value1.start)) || (value1 === null || value1 === void 0 ? void 0 : value1.end) && ((ref1 = props.isDateUnavailable) === null || ref1 === void 0 ? void 0 : ref1.call(props, value1.end))) ? 'invalid' : null);\n  return {\n    value: value1,\n    setValue: setValue,\n    dateRange: dateRange1,\n    timeRange: timeRange1,\n    granularity: granularity,\n    hasTime: hasTime,\n\n    setDate(part, date) {\n      setDateRange({ ...dateRange1,\n        [part]: date\n      });\n    },\n\n    setTime(part, time) {\n      setTimeRange({ ...timeRange1,\n        [part]: time\n      });\n    },\n\n    setDateTime(part, dateTime) {\n      setValue({ ...value1,\n        [part]: dateTime\n      });\n    },\n\n    setDateRange: setDateRange,\n    setTimeRange: setTimeRange,\n    isOpen: overlayState.isOpen,\n\n    setOpen(isOpen) {\n      // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time range was set and not the date range, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !((value1 === null || value1 === void 0 ? void 0 : value1.start) && (value1 === null || value1 === void 0 ? void 0 : value1.end)) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.start) && (dateRange1 === null || dateRange1 === void 0 ? void 0 : dateRange1.end) && hasTime) commitValue(dateRange1, {\n        start: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.start) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue),\n        end: (timeRange1 === null || timeRange1 === void 0 ? void 0 : timeRange1.end) || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.placeholderValue)\n      });\n      overlayState.setOpen(isOpen);\n    },\n\n    validationState: validationState,\n\n    formatValue(locale, fieldOptions) {\n      if (!value1 || !value1.start || !value1.end) return null;\n      let startTimeZone = 'timeZone' in value1.start ? value1.start.timeZone : undefined;\n      let startGranularity = props.granularity || (value1.start && 'minute' in value1.start ? 'minute' : 'day');\n      let endTimeZone = 'timeZone' in value1.end ? value1.end.timeZone : undefined;\n      let endGranularity = props.granularity || (value1.end && 'minute' in value1.end ? 'minute' : 'day');\n      let startOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {\n        granularity: startGranularity,\n        timeZone: startTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: value1.start.calendar.identifier === 'gregory' && value1.start.era === 'BC' || value1.end.calendar.identifier === 'gregory' && value1.end.era === 'BC'\n      });\n      let startDate = value1.start.toDate(startTimeZone || 'UTC');\n      let endDate = value1.end.toDate(endTimeZone || 'UTC');\n      let startFormatter = new $7UzoM$DateFormatter(locale, startOptions);\n      let endFormatter;\n\n      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value1.start.compare(value1.end) !== 0) {\n        // Use formatRange, as it results in shorter output when some of the fields\n        // are shared between the start and end dates (e.g. the same month).\n        // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n        try {\n          let parts = startFormatter.formatRangeToParts(startDate, endDate); // Find the separator between the start and end date. This is determined\n          // by finding the last shared literal before the end range.\n\n          let separatorIndex = -1;\n\n          for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.source === 'shared' && part.type === 'literal') separatorIndex = i;else if (part.source === 'endRange') break;\n          } // Now we can combine the parts into start and end strings.\n\n\n          let start = '';\n          let end = '';\n\n          for (let i1 = 0; i1 < parts.length; i1++) {\n            if (i1 < separatorIndex) start += parts[i1].value;else if (i1 > separatorIndex) end += parts[i1].value;\n          }\n\n          return {\n            start: start,\n            end: end\n          };\n        } catch (e) {// ignore\n        }\n\n        endFormatter = startFormatter;\n      } else {\n        let endOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, {\n          granularity: endGranularity,\n          timeZone: endTimeZone,\n          hideTimeZone: props.hideTimeZone,\n          hourCycle: props.hourCycle\n        });\n        endFormatter = new $7UzoM$DateFormatter(locale, endOptions);\n      }\n\n      return {\n        start: startFormatter.format(startDate),\n        end: endFormatter.format(endDate)\n      };\n    }\n\n  };\n}\n\nfunction $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {\n  let {\n    placeholderValue = new $7UzoM$Time(),\n    minValue: minValue,\n    maxValue: maxValue,\n    granularity: granularity\n  } = props;\n  let [value, setValue] = $7UzoM$useControlledState(props.value, props.defaultValue, props.onChange);\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let placeholderDate = $7UzoM$useMemo(() => $eff5d8ee529ac4bb$var$convertValue(placeholderValue), [placeholderValue]);\n  let minDate = $7UzoM$useMemo(() => $eff5d8ee529ac4bb$var$convertValue(minValue, day), [minValue, day]);\n  let maxDate = $7UzoM$useMemo(() => $eff5d8ee529ac4bb$var$convertValue(maxValue, day), [maxValue, day]);\n  let dateTime = $7UzoM$useMemo(() => value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [value]);\n\n  let onChange = newValue => {\n    setValue(v && 'day' in v ? newValue : newValue && $7UzoM$toTime(newValue));\n  };\n\n  return $3c0fc76039f1c516$export$60e84778edff6d26({ ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange: onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new $7UzoM$GregorianCalendar()\n  });\n}\n\nfunction $eff5d8ee529ac4bb$var$convertValue(value) {\n  let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $7UzoM$today($7UzoM$getLocalTimeZone());\n  if (!value) return null;\n  if ('day' in value) return value;\n  return $7UzoM$toCalendarDateTime(date, value);\n}\n\nexport { $ab5bf3f618090389$export$87194bb378cc3ac2 as useDatePickerState, $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState, $93c38a5e28be6249$export$e50a61c1de9f574 as useDateRangePickerState, $eff5d8ee529ac4bb$export$fd53cef0cc796101 as useTimeFieldState };","map":{"version":3,"mappings":";;;;;;SAgBgBA,0CAAUC,OAAkBC,UAAqBC,UAAqB;EACpF,OAAOF,KAAK,IAAI,IAAT,KACJC,QAAQ,IAAI,IAAZ,IAAoBD,KAAK,CAACG,OAAN,CAAcF,QAAd,IAA0B,CAA9C,IACAC,QAAQ,IAAI,IAAZ,IAAoBF,KAAK,CAACG,OAAN,CAAcD,QAAd,IAA0B,CAF1C,CAAP;AAID;;AAYD,MAAME,2CAAqB,GAAiB;EAC1CC,IAAI,EAAE,SADoC;EAE1CC,KAAK,EAAE,SAFmC;EAG1CC,GAAG,EAAE,SAHqC;EAI1CC,IAAI,EAAE,SAJoC;EAK1CC,MAAM,EAAE,SALkC;EAM1CC,MAAM,EAAE;AANkC,CAA5C;;SASgBC,0CACdC,cACAC,SAC4B;EAC5BD,YAAY,GAAG,KAAIR,2CAAJ;OAA8BQ;EAA9B,CAAf;EACA,IAAIE,WAAW,GAAGD,OAAO,CAACC,WAAR,IAAuB,QAAzC;EACA,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,YAAZ,CAAX;;MAC4BK;;EAA5B,IAAIC,QAAQ,GAAGH,IAAI,CAACI,OAAL,CAAY,CAACF,eAAsB,GAAtBJ,OAAO,CAACO,cAAT,MAAuB,IAAvB,IAACH,eAAsB,WAAvB,GAACA,eAAD,GAA2B,MAAvC,CAAf;EACA,IAAIC,QAAQ,GAAG,CAAf,EACEA,QAAQ,GAAG,CAAX;EAGF,IAAIG,MAAM,GAAGN,IAAI,CAACI,OAAL,CAAaL,WAAb,CAAb;EACA,IAAIO,MAAM,GAAG,CAAb,EACEA,MAAM,GAAG,CAAT;EAGF,IAAIH,QAAQ,GAAGG,MAAf,EACE,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;EAGF,IAAIC,KAAI,GAA+BR,IAAI,CAACS,KAAL,CAAWN,QAAX,EAAqBG,MAAM,GAAG,CAA9B,EAAiCI,MAAjC,CAAuC,CAAEC,IAAF,EAAQC,GAAR,KAAgB;IAC5FD,IAAI,CAACC,GAAD,CAAJ,GAAYf,YAAY,CAACe,GAAD,CAAxB;IACA,OAAOD,IAAP;EACD,CAHsC,EAGpC,EAHoC,CAAvC;EAKA,IAAIb,OAAO,CAACe,SAAR,IAAqB,IAAzB,EACEL,KAAI,CAACM,MAAL,GAAchB,OAAO,CAACe,SAAR,KAAsB,EAApC;EAGFL,KAAI,CAACO,QAAL,GAAgBjB,OAAO,CAACiB,QAAR,IAAoB,KAApC;EAEA,IAAIC,OAAO,GAAGjB,WAAW,KAAK,MAAhB,IAA0BA,WAAW,KAAK,QAA1C,IAAsDA,WAAW,KAAK,QAApF;EACA,IAAIiB,OAAO,IAAIlB,OAAO,CAACiB,QAAnB,IAA2B,CAAKjB,OAAO,CAACmB,YAA5C,EACET,KAAI,CAACU,YAAL,GAAoB,OAApB;EAGF,IAAIpB,OAAO,CAACqB,OAAR,IAAmBhB,QAAQ,KAAK,CAApC,EACEK,KAAI,CAACY,GAAL,GAAW,OAAX;EAGF,OAAOZ,KAAP;AACD;;SAEea,0CAAmBC,kBAAwC;EACzE,IAAIA,gBAAgB,IAAI,UAAUA,gBAAlC,EACE,OAAOA,gBAAP;EAGF,OAAO,IAAIC,WAAJ,EAAP;AACD;;SAEeC,0CAAavC,OAAkBwC,UAA+B;EAC5E,IAAIxC,KAAK,KAAK,IAAd,EACE,OAAO,IAAP;EAGF,IAAE,CAAGA,KAAL,EACE,OAAOyC,SAAP;EAGF,OAAOC,iBAAU,CAAC1C,KAAD,EAAQwC,QAAR,CAAjB;AACD;;SAGeG,0CAAsBN,kBAA6BvB,aAAqB0B,UAAoBV,UAAkB;EAC5H,IAAIO,gBAAJ,EACE,OAAOE,yCAAY,CAACF,gBAAD,EAAmBG,QAAnB,CAAnB;EAGF,IAAII,IAAI,GAAGF,iBAAU,CAACG,UAAG,CAACf,QAAD,CAAH,CAAcgB,GAAd,CAAkB;IACtCtC,IAAI,EAAE,CADgC;IAEtCC,MAAM,EAAE,CAF8B;IAGtCC,MAAM,EAAE,CAH8B;IAItCqC,WAAW,EAAE;EAJyB,CAAlB,CAAD,EAKjBP,QALiB,CAArB;EAOA,IAAI1B,WAAW,KAAK,MAAhB,IAA0BA,WAAW,KAAK,OAA1C,IAAqDA,WAAW,KAAK,KAAzE,EACE,OAAOkC,qBAAc,CAACJ,IAAD,CAArB;EAGF,IAAE,CAAGd,QAAL,EACE,OAAOmB,yBAAkB,CAACL,IAAD,CAAzB;EAGF,OAAOA,IAAP;AACD;;SAEeM,0CAAgBC,GAAcrC,aAAiD;EAC7F;EACA,IAAIsC,SAAS,GAAGC,aAAM,CAACF,CAAD,CAAtB;EACA,IAAIA,CAAJ,EACEC,SAAS,CAACE,OAAV,GAAoBH,CAApB;EAGFA,CAAC,GAAGC,SAAS,CAACE,OAAd;EACA,IAAIC,eAAe,GAAIJ,CAAC,IAAI,cAAcA,CAAnB,GAAuBA,CAAC,CAACrB,QAAzB,GAAoCW,SAA3D;EACA3B,WAAW,GAAGA,WAAW,KAAKqC,CAAC,IAAI,YAAYA,CAAjB,GAAqB,QAArB,GAAgC,KAArC,CAAzB,CAT6F,CAW7F;;EACA,IAAIA,CAAC,MAAMrC,WAAW,IAAIqC,CAArB,CAAL,EACE,MAAM,IAAI7B,KAAJ,CAAU,yBAAyBR,WAAzB,GAAuC,aAAvC,GAAuDqC,CAAC,CAACK,QAAF,EAAjE,CAAN;EAGF,OAAO,CAAC1C,WAAD,EAAcyC,eAAd,CAAP;AACD;;SCjFeE,0CAAmBC,OAAgD;MAyDrEC;EAxDZ,IAAIC,YAAY,GAAGC,6BAAsB,CAACH,KAAD,CAAzC;EACA,IAAG,CAAE1D,KAAF,EAAS8D,QAAT,IAAqBC,yBAAkB,CAAYL,KAAK,CAAC1D,KAAlB,EAAyB0D,KAAK,CAACM,YAAN,IAAsB,IAA/C,EAAqDN,KAAK,CAACO,QAA3D,CAA1C;EAEA,IAAId,CAAC,GAAInD,KAAK,IAAI0D,KAAK,CAACrB,gBAAxB;EACA,IAAG,CAAEvB,WAAF,EAAeyC,eAAf,IAAkCL,yCAAe,CAACC,CAAD,EAAIO,KAAK,CAAC5C,WAAV,CAApD;EACA,IAAIoD,SAAS,GAAGlE,KAAK,IAAI,IAAT,GAAgBA,KAAK,CAACmE,MAAN,CAAaZ,eAAe,SAAf,mBAAe,WAAf,qBAAmB,KAAhC,CAAhB,GAAyD,IAAzE;EACA,IAAIxB,OAAO,GAAGjB,WAAW,KAAK,MAAhB,IAA0BA,WAAW,KAAK,QAA1C,IAAsDA,WAAW,KAAK,QAAtE,IAAkFA,WAAW,KAAK,aAAhH;;MAC0BsD;;EAA1B,IAAIC,mBAAmB,IAAGD,oBAAyB,GAAzBV,KAAK,CAACW,mBAAT,MAA4B,IAA5B,IAAGD,oBAAyB,WAA5B,GAAGA,oBAAH,GAAgC,IAAvD;EAEA,IAAG,CAAEE,YAAF,EAAgBC,eAAhB,IAAmCC,eAAQ,CAAY,IAAZ,CAA9C;EACA,IAAG,CAAEC,YAAF,EAAgBC,eAAhB,IAAmCF,eAAQ,CAAY,IAAZ,CAA9C;;EAEA,IAAIxE,KAAJ,EAAW;IACTsE,YAAY,GAAGtE,KAAf;IACA,IAAI,UAAUA,KAAd,EACEyE,YAAY,GAAGzE,KAAf;EAEH,CAlBgF,CAoBjF;;;EACA,IAAImD,CAAC,MAAMrC,WAAW,IAAIqC,CAArB,CAAL,EACE,MAAM,IAAI7B,KAAJ,CAAU,yBAAyBR,WAAzB,GAAuC,aAAvC,GAAuDqC,CAAC,CAACK,QAAF,EAAjE,CAAN;;EAGF,IAAImB,WAAW,IAAI/B,IAAJ,EAAqBgC,IAArB,KAAyC;IACtDd,QAAQ,CAAC,cAAcc,IAAd,GAAqBA,IAAI,CAAC9B,GAAL,CAASE,qBAAc,CAACJ,IAAD,CAAvB,CAArB,GAAsDK,yBAAkB,CAACL,IAAD,EAAOgC,IAAP,CAAzE,CAAR;EACD,CAFD,CAzBiF,CA6BjF;;;EACA,IAAIC,UAAU,GAAIC,QAAJ,IAA+B;IAC3C,IAAIC,WAAW,GAAG,OAAOV,mBAAP,KAA+B,UAA/B,GAA4CA,mBAAmB,EAA/D,GAAoEA,mBAAtF;;IACA,IAAItC,OAAJ,EAAW;MACT,IAAI0C,YAAY,IAAIM,WAApB,EACEJ,WAAW,CAACG,QAAD,EAAWL,YAAY,IAAIrC,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP,CAA7C,CAAX,CADF,KAGEkC,eAAe,CAACO,QAAD,CAAf;KAJJ,MAOEhB,QAAQ,CAACgB,QAAD,CAAR;;IAGF,IAAIC,WAAJ,EACEnB,YAAY,CAACoB,OAAb,CAAqB,KAArB;EAEH,CAfD;;EAiBA,IAAIC,UAAU,GAAIH,QAAJ,IAA4B;IACxC,IAAIR,YAAJ,EACEK,WAAW,CAACL,YAAD,EAAeQ,QAAf,CAAX,CADF,KAGEJ,eAAe,CAACI,QAAD,CAAf;EAEH,CAND;;EAQA,IAAII,eAAe,GAAoBxB,KAAK,CAACwB,eAAN,KACpCnF,yCAAS,CAACC,KAAD,EAAQ0D,KAAK,CAACzD,QAAd,EAAwByD,KAAK,CAACxD,QAA9B,CAAT,GAAmD,SAAnD,GAA+D,IAD3B,MAEpCF,KAAK,MAAI2D,GAAuB,GAAvBD,KAAK,CAACyB,iBAAV,MAA2B,IAA3B,IAAIxB,GAAuB,KAAvB,MAAJ,GAAI,MAAJ,GAAIA,GAAuB,CAAvByB,YAA0BpF,KAA1B,CAAJ,CAAL,GAA4C,SAA5C,GAAwD,IAFpB,CAAvC;EAIA,OAAO;WACLA,KADK;cAEL8D,QAFK;IAGLI,SAAS,EAAEI,YAHN;IAILe,SAAS,EAAEZ,YAJN;IAKLa,YAAY,EAAET,UALT;IAMLU,YAAY,EAAEN,UANT;iBAOLnE,WAPK;aAQLiB,OARK;IASLyD,MAAM,EAAE5B,YAAY,CAAC4B,MAThB;;IAULR,OAAO,CAACQ,MAAD,EAAS;MACd;MACA;MACA;MACA,IAAE,CAAGA,MAAH,IAAS,CAAKxF,KAAd,IAAuBsE,YAAvB,IAAuCvC,OAAzC,EACE4C,WAAW,CAACL,YAAD,EAAeG,YAAY,IAAIrC,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP,CAAjD,CAAX;MAGFuB,YAAY,CAACoB,OAAb,CAAqBQ,MAArB;IACD,CAnBI;;qBAoBLN,eApBK;;IAqBLO,WAAW,CAACC,MAAD,EAAS9E,YAAT,EAAuB;MAChC,IAAE,CAAGsD,SAAL,EACE,OAAO,EAAP;MAGF,IAAIyB,aAAa,GAAGhF,yCAAgB,CAACC,YAAD,EAAe;qBACjDE,WADiD;QAEjDgB,QAAQ,EAAEyB,eAFuC;QAGjDvB,YAAY,EAAE0B,KAAK,CAAC1B,YAH6B;QAIjDJ,SAAS,EAAE8B,KAAK,CAAC9B,SAJgC;QAKjDM,OAAO,EAAElC,KAAK,CAACwC,QAAN,CAAeoD,UAAf,KAA8B,SAA9B,IAA2C5F,KAAK,CAACmC,GAAN,KAAc;MALjB,CAAf,CAApC;MAQA,IAAI0D,SAAS,GAAG,IAAIC,oBAAJ,CAAkBJ,MAAlB,EAA0BC,aAA1B,CAAhB;MACA,OAAOE,SAAS,CAACE,MAAV,CAAiB7B,SAAjB,CAAP;IACD;;EApCI,CAAP;AAsCD,C,CCrJD;AACA;AACA;;;AACA,MAAM8B,kCAAY,GAAG,IAAIC,wBAAJ,CAAsB;EACzCC,GAAG,EAAE;IAAC7F,IAAI,EAAE,OAAP;IAAgBC,KAAK,EAAE,KAAvB;IAA8BC,GAAG,EAAE;EAAnC,CADoC;EAEzC4F,EAAE,EAAE;IAAC9F,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAFqC;EAGzC6F,EAAE,EAAE;IAAC/F,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,IAA9B;IAAwCC,GAAG,EAAE;EAA7C,CAHqC;EAIzB8F,EAAd,EAAE;IAAChG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAJqC;EAKzC+F,EAAE,EAAE;IAACjG,IAAI,EAAE,KAAP;IAAiBC,KAAK,EAAE,KAAxB;IAAkCC,GAAG,EAAE;EAAvC,CALqC;EAMhCgG,GAAN,EAAE;IAAClG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CANoC;EAOzCiG,EAAE,EAAE;IAACnG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAPqC;EAQzCkG,EAAE,EAAE;IAACpG,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CARqC;EASjCmG,EAAN,EAAE;IAACrG,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CATqC;EAUjCoG,EAAN,EAAE;IAACtG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,MAAtB;IAAsCC,GAAG,EAAE;EAA3C,CAVqC;EAWjCqG,EAAN,EAAE;IAACvG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAXqC;EAYzCsG,EAAE,EAAE;IAACxG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAZqC;EAazCuG,EAAE,EAAE;IAACzG,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAbqC;EAczCwG,GAAG,EAAE;IAAC1G,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAdoC;EAezCyG,GAAG,EAAE;IAAC3G,IAAI,EAAE,KAAP;IAAiBC,KAAK,EAAE,MAAxB;IAAoCC,GAAG,EAAE;EAAzC,CAfoC;EAgB/B0G,EAAR,EAAE;IAAC5G,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAhBqC;EAiBzC2G,EAAE,EAAE;IAAC7G,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAjBqC;EAkBzC4G,EAAE,EAAE;IAAC9G,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCC,GAAG,EAAE;EAArC,CAlBqC;EAmBrC6G,EAAF,EAAE;IAAC/G,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAnBqC;EAoBzC8G,GAAG,EAAE;IAAChH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CApBoC;EAqBvC+G,IAAE;IAACjH,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CArBqC;EAsBjCgH,EAAN,EAAE;IAAClH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAtBqC;EAuBzCiH,EAAE,EAAE;IAACnH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAvBqC;EAwBzCkH,EAAE,EAAE;IAACpH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAxBqC;EAyBzCmH,EAAE,EAAE;IAACrH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAzBqC;EA0BzCoH,EAAE,EAAE;IAACtH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA1BqC;EA2BzCqH,EAAE,EAAE;IAACvH,IAAI,EAAE,KAAP;IAAiBC,KAAK,EAAE,KAAxB;IAAkCC,GAAG,EAAE;EAAvC,CA3BqC;EA4BhCsH,EAAP,EAAE;IAACxH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA5BqC;EA6BvCuH,IAAE;IAACzH,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA7BqC;EA8BzCwH,EAAE,EAAE;IAAC1H,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA9BqC;EA+BzCyH,EAAE,EAAE;IAAC3H,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA/BqC;EAgCzC0H,EAAE,EAAE;IAAC5H,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAhCqC;EAiCzC2H,EAAE,EAAE;IAAC7H,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAjCqC;EAkCzC4H,EAAE,EAAE;IAAC9H,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAlCqC;EAmCzC6H,EAAE,EAAE;IAAC/H,IAAI,EAAE,KAAP;IAAiBC,KAAK,EAAE,MAAxB;IAAoCC,GAAG,EAAE;EAAzC,CAnCqC;EAoC/B8H,EAAR,EAAE;IAAChI,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CApCqC;EAqCzC+H,GAAG,EAAE;IAACjI,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CArCoC;EAsCzCgI,EAAE,EAAE;IAAClI,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCC,GAAG,EAAE;EAArC,CAtCqC;EAuCrCiI,EAAF,EAAE;IAACnI,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAvCqC;EAwCzCkI,EAAE,EAAE;IAACpI,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAxCqC;EAyCzCmI,EAAE,EAAE;IAACrI,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAzCqC;EA0CzCoI,EAAE,EAAE;IAACtI,IAAI,EAAE,KAAP;IAAgBC,KAAK,EAAE,GAAvB;IAA8BC,GAAG,EAAE;EAAnC,CA1CqC;EA2CnCqI,EAAJ,EAAE;IAACvI,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,IAA9B;IAAwCC,GAAG,EAAE;EAA7C,CA3CqC;EA4CzBsI,EAAd,EAAE;IAACxI,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CA5CqC;EA6CjCuI,EAAN,EAAE;IAACzI,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,MAA9B;IAA8CC,GAAG,EAAE;EAAnD,CA7CqC;EA8CjBwI,EAAtB,EAAE;IAAC1I,IAAI,EAAE,IAAP;IAAiBC,KAAK,EAAE,GAAxB;IAA+BC,GAAG,EAAE;EAApC,CA9CqC;EA+CjCyI,EAAN,EAAE;IAAC3I,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA/CqC;EAgDzC0I,EAAE,EAAE;IAAC5I,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,IAA9B;IAAwCC,GAAG,EAAE;EAA7C,CAhDqC;EAiDzB2I,EAAd,EAAE;IAAC7I,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAjDqC;EAkDzC4I,EAAE,EAAE;IAAC9I,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAlDqC;EAmDzC6I,GAAG,EAAE;IAAC/I,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAnDoC;EAoDzC8I,EAAE,EAAE;IAAChJ,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,MAA9B;IAA8CC,GAAG,EAAE;EAAnD,CApDqC;EAqDf+I,EAAxB,EAAE;IAACjJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CArDqC;EAsDzCgJ,EAAE,EAAE;IAAClJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAtDqC;EAuDzCiJ,EAAE,EAAE;IAACnJ,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCC,GAAG,EAAE;EAArC,CAvDqC;EAwDrCkJ,EAAF,EAAE;IAACpJ,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCC,GAAG,EAAE;EAArC,CAxDqC;EAyDrCmJ,EAAF,EAAE;IAACrJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAzDqC;EA0DzCoJ,EAAE,EAAE;IAACtJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA1DqC;EA2DzCqJ,EAAE,EAAE;IAACvJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA3DqC;EA4DzCsJ,EAAE,EAAE;IAACxJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA5DqC;EA6DzCuJ,EAAE,EAAE;IAACzJ,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA7DqC;EA8DzCwJ,EAAE,EAAE;IAAC1J,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CA9DqC;EA+DjCyJ,EAAN,EAAE;IAAC3J,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CA/DqC;EAgEzC0J,GAAG,EAAE;IAAC5J,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAhEoC;EAiEzC2J,EAAE,EAAE;IAAC7J,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAjEqC;EAkEzC4J,EAAE,EAAE;IAAC9J,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAlEqC;EAmEzC6J,EAAE,EAAE;IAAC/J,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CAnEqC;EAoEjC8J,EAAN,EAAE;IAAChK,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCC,GAAG,EAAE;EAArC,CApEqC;EAqErC+J,GAAD,EAAE;IAACjK,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CArEoC;EAsEzCgK,EAAE,EAAE;IAAClK,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CAtEqC;EAuEjCiK,EAAN,EAAE;IAACnK,IAAI,EAAE,MAAP;IAAuBC,KAAK,EAAE,IAA9B;IAAwCC,GAAG,EAAE;EAA7C,CAvEqC;EAwEzBkK,EAAd,EAAE;IAACpK,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAE,IAAtB;IAA4BC,GAAG,EAAE;EAAjC,CAxEqC;EAyEzCmK,EAAE,EAAE;IAACrK,IAAI,EAAE,MAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAkCC,GAAG,EAAE;EAAvC,CAzEqC;EA0EjC,SAAC;IAACF,IAAI,EAAE,GAAP;IAAcC,KAAK,EAAE,GAArB;IAA4BC,GAAG,EAAE;EAAjC,CA1EgC;EA2EnC,SAAG;IAACF,IAAI,EAAE,GAAP;IAAcC,KAAK,EAAE,GAArB;IAA4BC,GAAG,EAAE;EAAjC;AA3EgC,CAAtB,EA4ElB,IA5EkB,CAArB;;SA8EgBoK,0CAAeC,OAAe5K,OAAe0F,QAAgB;EAC3E;EACA,IAAIkF,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,WAAjC,EACE,OAAO5K,KAAP;EAGF,IAAI4K,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAA9B,IAAyCA,KAAK,KAAK,KAAvD,EACE,OAAO5E,kCAAY,CAAC6E,kBAAb,CAAgCD,KAAhC,EAAuClF,MAAvC,CAAP,CAPyE,CAU3E;;EACA,OAAO,IAAP;AACD;;ACfD,MAAMoF,uCAAiB,GAAG;EACxBzK,IAAI,EAAE,IADkB;EAExBC,KAAK,EAAE,IAFiB;EAGxBC,GAAG,EAAE,IAHmB;EAIxBC,IAAI,EAAE,IAJkB;EAKxBC,MAAM,EAAE,IALgB;EAMxBC,MAAM,EAAE,IANgB;EAOxBqK,SAAS,EAAE,IAPa;EAQxB5I,GAAG,EAAE;AARmB,CAA1B;AAWA,MAAM6I,+BAAS,GAAG;EAChB3K,IAAI,EAAE,CADU;EAEhBC,KAAK,EAAE,CAFS;EAGhBC,GAAG,EAAE,CAHW;EAIhBC,IAAI,EAAE,CAJU;EAKhBC,MAAM,EAAE,EALQ;EAMhBC,MAAM,EAAE;AANQ,CAAlB,C,CASA;;AACA,MAAMuK,kCAAY,GAAG;EACnBC,SAAS,EAAE;AADQ,CAArB;;SA0BgBC,0CAAkBzH,OAA8C;EAC9E,IAAI;IAACgC,QACHA,MADE;IACI0F,gBACNA,cAFE;IAEYpJ,cACdA,YAHE;IAGUqJ,YACZA,UAJE;IAIQC,YACVA,UALE;IAKQC,YACVA;EANE,IAOA7H,KAPJ;EASA,IAAI8H,EAAC,GAAe9H,KAAK,CAAC1D,KAAN,IAAe0D,KAAK,CAACM,YAArB,IAAqCN,KAAK,CAACrB,gBAA/D;EACA,IAAG,CAAEvB,WAAF,EAAeyC,eAAf,IAAkCL,yCAAe,CAACsI,EAAD,EAAI9H,KAAK,CAAC5C,WAAV,CAApD;EACA,IAAIgB,QAAQ,GAAGyB,eAAe,IAAI,KAAlC,CAZ8E,CAc9E;;EACA,IAAIiI,EAAC,MAAM1K,WAAW,IAAI0K,EAArB,CAAL,EACE,MAAM,IAAIlK,KAAJ,CAAU,yBAAyBR,WAAzB,GAAuC,aAAvC,GAAuD0K,EAAC,CAAChI,QAAF,EAAjE,CAAN;EAGF,IAAIiI,gBAAgB,GAAGC,cAAO,OAAO,IAAI5F,oBAAJ,CAAkBJ,MAAlB,CAAP,EAAkC,CAACA,MAAD,CAAlC,CAA9B;EACA,IAAIlD,QAAQ,GAAGkJ,cAAO,OAAON,cAAc,CAACK,gBAAgB,CAACE,eAAjB,GAAmCnJ,QAApC,CAArB,EAAoE,CAAC4I,cAAD,EAAiBK,gBAAjB,CAApE,CAAtB;EAEA,IAAG,CAAEG,MAAF,EAASC,OAAT,IAAoB9H,yBAAkB,CACvCL,KAAK,CAAC1D,KADiC,EAEvC0D,KAAK,CAACM,YAFiC,EAGvCN,KAAK,CAACO,QAHiC,CAAzC;EAMA,IAAI6H,aAAa,GAAGJ,cAAO,OAAOnJ,yCAAY,CAACqJ,MAAD,EAAQpJ,QAAR,CAAnB,EAAsC,CAACoJ,MAAD,EAAQpJ,QAAR,CAAtC,CAA3B,CA5B8E,CA8B9E;EACA;EACA;EACA;;EACA,IAAG,CAAEuJ,eAAF,EAAmBC,kBAAnB,IAAyCxH,eAAQ,OAC5C7B,yCAAqB,CAACe,KAAK,CAACrB,gBAAP,EAAyBvB,WAAzB,EAAsC0B,QAAtC,EAAgDe,eAAhD,CADuB,CAApD;EAIA,IAAI0I,GAAG,GAAGH,aAAa,IAAIC,eAA3B;EACA,IAAI7J,OAAO,GAAGM,QAAQ,CAACoD,UAAT,KAAwB,SAAxB,IAAqCqG,GAAG,CAAC9J,GAAJ,KAAY,IAA/D;;MAGkBlB;;EAFlB,IAAIiL,UAAU,GAAGR,cAAO,QAAQ;iBAC9B5K,WAD8B;IAE9BM,cAAc,GAAEH,eAAoB,GAApByC,KAAK,CAACtC,cAAR,MAAsB,IAAtB,IAAEH,eAAoB,WAAtB,GAAEA,eAAF,GAA0B,MAFV;IAG9Ba,QAAQ,EAAEyB,eAHoB;kBAI9BvB,YAJ8B;IAK9BJ,SAAS,EAAE8B,KAAK,CAAC9B,SALa;aAM9BM;EAN8B,CAAR,GAOpB,CAACwB,KAAK,CAACtC,cAAP,EAAuBN,WAAvB,EAAoC4C,KAAK,CAAC9B,SAA1C,EAAqD2B,eAArD,EAAsEvB,YAAtE,EAAoFE,OAApF,CAPoB,CAAxB;EAQA,IAAIR,IAAI,GAAGgK,cAAO,OAAO/K,yCAAgB,CAAC,EAAD,EAAKuL,UAAL,CAAvB,EAAyC,CAACA,UAAD,CAAzC,CAAlB;EAEA,IAAIC,aAAa,GAAGT,cAAO,OAAO,IAAI5F,oBAAJ,CAAkBJ,MAAlB,EAA0BhE,IAA1B,CAAP,EAAwC,CAACgE,MAAD,EAAShE,IAAT,CAAxC,CAA3B;EACA,IAAIiK,eAAe,GAAGD,cAAO,OAAOS,aAAa,CAACR,eAAd,EAAP,EAAwC,CAACQ,aAAD,CAAxC,CAA7B,CAnD8E,CAqD9E;EACA;;EACA,IAAIC,WAAW,GAAsCV,cAAO,OAC1DS,aAAa,CAACE,aAAd,CAA4B,IAAIC,IAAJ,EAA5B,EACGC,MADH,CACUC,GAAD,IAAQ1B,uCAAiB,CAAC0B,GAAG,CAACC,IAAL,CADlC,EAEGhL,MAFH,CAES,CAAEiL,CAAF,EAAKF,GAAL,MAAcE,CAAC,CAACF,GAAG,CAACC,IAAL,CAAD,GAAc,IAAd,EAAoBC,CAAlC,CAFT,EAE+C,EAF/C,CAD0D,EAI1D,CAACP,aAAD,CAJ0D,CAA5D;EAMA,IAAG,CAAEQ,aAAF,EAAiBC,gBAAjB,IAAqCpI,eAAQ,OACxCd,KAAK,CAAC1D,KAAN,IAAe0D,KAAK,CAACM,YAArB,GAAoC,KAAIoI;EAAJ,CAApC,GAAuD,EADf,CAAhD,CA7D8E,CAiE9E;;EACA,IAAIS,sBAAsB,GAAGxJ,aAAM,CAACb,QAAQ,CAACoD,UAAV,CAAnC;EACAkH,gBAAS,OAAO;IACd,IAAItK,QAAQ,CAACoD,UAAT,KAAwBiH,sBAAsB,CAACvJ,OAAnD,EAA4D;MAC1DuJ,sBAAsB,CAACvJ,OAAvB,GAAiCd,QAAQ,CAACoD,UAA1C;MACAoG,kBAAkB,CAACe,WAAD,IAChB/L,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,GAAoC,CAApC,GACItK,iBAAU,CAACqK,WAAD,EAAcvK,QAAd,CADd,GAEIG,yCAAqB,CAACe,KAAK,CAACrB,gBAAP,EAAyBvB,WAAzB,EAAsC0B,QAAtC,EAAgDe,eAAhD,CAHT,CAAlB;IAKD;EACF,CATQ,EASN,CAACf,QAAD,EAAW1B,WAAX,EAAwB6L,aAAxB,EAAuCpJ,eAAvC,EAAwDG,KAAK,CAACrB,gBAA9D,CATM,CAAT,CAnE8E,CA8E9E;;EACA,IAAIuJ,MAAK,IAAI5K,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,GAAoChM,MAAM,CAACD,IAAP,CAAYqL,WAAZ,EAAyBY,MAA1E,EAAkF;IAChFL,aAAa,GAAG,KAAIP;IAAJ,CAAhB;IACAQ,gBAAgB,CAACD,aAAD,CAAhB;EACD,CAlF6E,CAoF9E;;;EACA,IAAIf,MAAK,IAAI,IAAT,IAAiB5K,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,KAAsChM,MAAM,CAACD,IAAP,CAAYqL,WAAZ,EAAyBY,MAApF,EAA4F;IAC1FL,aAAa,GAAG,EAAhB;IACAC,gBAAgB,CAACD,aAAD,CAAhB;IACAX,kBAAkB,CAACrJ,yCAAqB,CAACe,KAAK,CAACrB,gBAAP,EAAyBvB,WAAzB,EAAsC0B,QAAtC,EAAgDe,eAAhD,CAAtB,CAAlB;EACD,CAzF6E,CA2F9E;;;EACA,IAAI0J,YAAY,GAAGnB,aAAa,IAAI9K,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,IAAqChM,MAAM,CAACD,IAAP,CAAYqL,WAAZ,EAAyBY,MAA/E,GAAwFlB,aAAxF,GAAwGC,eAA3H;;EACA,IAAIjI,QAAQ,GAAIgB,QAAJ,IAA4B;IACtC,IAAIpB,KAAK,CAAC2H,UAAN,IAAoB3H,KAAK,CAAC4H,UAA9B,EACE;;IAGF,IAAItK,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,IAAqChM,MAAM,CAACD,IAAP,CAAYqL,WAAZ,EAAyBY,MAAlE,EAA0E;MACxE;MACA;MACAlI,QAAQ,GAAGpC,iBAAU,CAACoC,QAAD,EAAS,CAAE0G,EAAC,SAAD,MAAC,KAAD,oBAAC,CAAEhJ,QAAL,KAAiB,IAAI0K,wBAAJ,EAA1B,CAArB;MACArB,OAAO,CAAC/G,QAAD,CAAP;IACD,CALD,MAMEkH,kBAAkB,CAAClH,QAAD,CAAlB;EAEH,CAbD;;EAeA,IAAIZ,SAAS,GAAGwH,cAAO,OAAOuB,YAAY,CAAC9I,MAAb,CAAoBrC,QAApB,CAAP,EAAsC,CAACmL,YAAD,EAAenL,QAAf,CAAtC,CAAvB;EACA,IAAIqL,QAAQ,GAAGzB,cAAO,OACpBS,aAAa,CAACE,aAAd,CAA4BnI,SAA5B,EACGkJ,GADH,CACOC,OAAD,IAAY;IACd,IAAIC,UAAU,GAAGxC,uCAAiB,CAACuC,OAAO,CAACZ,IAAT,CAAlC;IACA,IAAIY,OAAO,CAACZ,IAAR,KAAiB,KAAjB,IAA0BjK,QAAQ,CAAC+K,OAAT,GAAmBP,MAAnB,KAA8B,CAA5D,EACEM,UAAU,GAAG,KAAb;IAGF,IAAIE,aAAa,GAAG1C,uCAAiB,CAACuC,OAAO,CAACZ,IAAT,CAAjB,IAA8B,CAAME,aAAa,CAACU,OAAO,CAACZ,IAAT,CAArE;IACA,IAAIM,WAAW,GAAGjC,uCAAiB,CAACuC,OAAO,CAACZ,IAAT,CAAjB,GAAkC9B,yCAAc,CAAC0C,OAAO,CAACZ,IAAT,EAAeY,OAAO,CAACrN,KAAvB,EAA8B0F,MAA9B,CAAhD,GAAwF,IAA1G;IACA,OAAO;MACL+G,IAAI,EAAExB,kCAAY,CAACoC,OAAO,CAACZ,IAAT,CAAZ,IAA8BY,OAAO,CAACZ,IADvC;MAELgB,IAAI,EAAED,aAAa,GAAGT,WAAH,GAAiBM,OAAO,CAACrN,KAFvC;SAGF0N,sCAAgB,CAACT,YAAD,EAAeI,OAAO,CAACZ,IAAvB,EAA6Bd,eAA7B,CAHd;qBAIL6B,aAJK;mBAKLT,WALK;kBAMLO;IANK,CAAP;EAQD,CAjBH,CADoB,EAmBpB,CAACpJ,SAAD,EAAYyI,aAAZ,EAA2BR,aAA3B,EAA0CR,eAA1C,EAA2DsB,YAA3D,EAAyEzK,QAAzE,EAAmFkD,MAAnF,CAnBoB,CAAtB,CA7G8E,CAkI9E;EACA;;EACA,IAAI0G,WAAW,CAACjK,GAAZ,IAAmBwK,aAAa,CAACtM,IAAjC,IAAqC,CAAKsM,aAAa,CAACxK,GAA5D,EAAiE;IAC/DwK,aAAa,CAACxK,GAAd,GAAoB,IAApB;IACAyK,gBAAgB,CAAC,KAAID;IAAJ,CAAD,CAAhB;EACD,CAHD,MAGO,IAAE,CAAGP,WAAW,CAACjK,GAAf,IAAsBwK,aAAa,CAACxK,GAAtC,EAA2C;IAChD,OAAOwK,aAAa,CAACxK,GAArB;IACAyK,gBAAgB,CAAC,KAAID;IAAJ,CAAD,CAAhB;EACD;;EAED,IAAIgB,SAAS,GAAIC,IAAJ,IAA2C;IACtDjB,aAAa,CAACiB,IAAD,CAAb,GAAsB,IAAtB;IACA,IAAIA,IAAI,KAAK,MAAT,IAAmBxB,WAAW,CAACjK,GAAnC,EACEwK,aAAa,CAACxK,GAAd,GAAoB,IAApB;IAEFyK,gBAAgB,CAAC,KAAID;IAAJ,CAAD,CAAhB;EACD,CAND;;EAQA,IAAIkB,aAAa,IAAIpB,IAAJ,EAAwCqB,MAAxC,KAA2D;IAC1E,IAAE,CAAGnB,aAAa,CAACF,IAAD,CAAlB,EAA0B;MACxBkB,SAAS,CAAClB,IAAD,CAAT;MACA,IAAIzL,MAAM,CAACD,IAAP,CAAY4L,aAAZ,EAA2BK,MAA3B,IAAqChM,MAAM,CAACD,IAAP,CAAYqL,WAAZ,EAAyBY,MAAlE,EACElJ,QAAQ,CAACmJ,YAAD,CAAR;IAEH,CALD,MAMEnJ,QAAQ,CAACiK,gCAAU,CAACd,YAAD,EAAeR,IAAf,EAAqBqB,MAArB,EAA6BnC,eAA7B,CAAX,CAAR;EAEH,CATD;;EAWA,IAAIzG,eAAe,GAAoBxB,KAAK,CAACwB,eAAN,KACpCnF,yCAAS,CAAC+L,aAAD,EAAgBpI,KAAK,CAACzD,QAAtB,EAAgCyD,KAAK,CAACxD,QAAtC,CAAT,GAA2D,SAA3D,GAAuE,IADnC,CAAvC;;MAYkB8N;;EATlB,OAAO;IACLhO,KAAK,EAAE8L,aADF;eAEL5H,SAFK;cAGL1B,QAHK;cAILsB,QAJK;cAKLqJ,QALK;mBAMLhB,aANK;qBAOLjH,eAPK;iBAQLpE,WARK;IASLM,cAAc,GAAE4M,gBAAoB,GAApBtK,KAAK,CAACtC,cAAR,MAAsB,IAAtB,IAAE4M,gBAAoB,WAAtB,GAAEA,gBAAF,GAA0B,MATnC;gBAUL3C,UAVK;gBAWLC,UAXK;gBAYLC,UAZK;;IAaL0C,SAAS,CAACL,IAAD,EAAO;MACdC,aAAa,CAACD,IAAD,EAAO,CAAP,CAAb;IACD,CAfI;;IAgBLM,SAAS,CAACN,IAAD,EAAO;MACdC,aAAa,CAACD,IAAD,EAAO,EAAP,CAAb;IACD,CAlBI;;IAmBLO,aAAa,CAACP,IAAD,EAAO;MAClBC,aAAa,CAACD,IAAD,EAAO5C,+BAAS,CAAC4C,IAAD,CAAT,IAAmB,CAA1B,CAAb;IACD,CArBI;;IAsBLQ,aAAa,CAACR,IAAD,EAAO;MAClBC,aAAa,CAACD,IAAD,EAAK,EAAI5C,+BAAS,CAAC4C,IAAD,CAAT,IAAmB,CAAvB,CAAL,CAAb;IACD,CAxBI;;IAyBLS,UAAU,CAACT,IAAD,EAAOzK,CAAP,EAAU;MAClBwK,SAAS,CAACC,IAAD,CAAT;MACA9J,QAAQ,CAACwK,gCAAU,CAACrB,YAAD,EAAeW,IAAf,EAAqBzK,CAArB,EAAwBwI,eAAxB,CAAX,CAAR;IACD,CA5BI;;IA6BL4C,kBAAkB,GAAG;MACnB,IAAI7K,KAAK,CAAC2H,UAAN,IAAoB3H,KAAK,CAAC4H,UAA9B,EACE,OAFiB,CAKnB;;MACA,IAAIkD,SAAS,GAAGxN,MAAM,CAACD,IAAP,CAAY4L,aAAZ,CAAhB;MACA,IAAI8B,OAAO,GAAGzN,MAAM,CAACD,IAAP,CAAYqL,WAAZ,CAAd;;MACA,IAAIoC,SAAS,CAACxB,MAAV,KAAqByB,OAAO,CAACzB,MAAR,GAAiB,CAAtC,IAA2CZ,WAAW,CAACrB,SAAvD,IAAgE,CAAK4B,aAAa,CAAC5B,SAAvF,EAAkG;QAChG4B,aAAa,GAAG,KAAIP;QAAJ,CAAhB;QACAQ,gBAAgB,CAACD,aAAD,CAAhB;QACA7I,QAAQ,CAACmJ,YAAY,CAACyB,IAAb,EAAD,CAAR;MACD;IACF,CA1CI;;IA2CLC,YAAY,CAACf,IAAD,EAAO;MACjB,OAAOjB,aAAa,CAACiB,IAAD,CAApB;MACAhB,gBAAgB,CAAC,KAAID;MAAJ,CAAD,CAAhB;MAEA,IAAII,WAAW,GAAGpK,yCAAqB,CAACe,KAAK,CAACrB,gBAAP,EAAyBvB,WAAzB,EAAsC0B,QAAtC,EAAgDe,eAAhD,CAAvC;MACA,IAAIvD,KAAK,GAAGiN,YAAZ,CALiB,CAOjB;;MACA,IAAIW,IAAI,KAAK,WAAT,IAAwB,UAAUX,YAAlC,IAAkD,UAAUF,WAAhE,EAA6E;QAC3E,IAAI6B,IAAI,GAAG3B,YAAY,CAACzM,IAAb,IAAqB,EAAhC;QACA,IAAIqO,UAAU,GAAG9B,WAAW,CAACvM,IAAZ,IAAoB,EAArC;QACA,IAAIoO,IAAI,KAAKC,UAAb,EACE7O,KAAK,GAAGiN,YAAY,CAACnK,GAAb,CAAiB;UAACtC,IAAI,EAAEyM,YAAY,CAACzM,IAAb,GAAoB;QAA3B,CAAjB,CAAR,CADF,KAEO,IAAE,CAAGoO,IAAH,IAAWC,UAAb,EACL7O,KAAK,GAAGiN,YAAY,CAACnK,GAAb,CAAiB;UAACtC,IAAI,EAAEyM,YAAY,CAACzM,IAAb,GAAoB;QAA3B,CAAjB,CAAR;MAEH,CARD,MAQO,IAAIoN,IAAI,IAAIX,YAAZ,EACLjN,KAAK,GAAGiN,YAAY,CAACnK,GAAb,CAAiB;SAAE8K,OAAOb,WAAW,CAACa,IAAD;MAApB,CAAjB,CAAR;;MAGF/B,OAAO,CAAC,IAAD,CAAP;MACA/H,QAAQ,CAAC9D,KAAD,CAAR;IACD,CAjEI;;IAkELyF,WAAW,CAAC7E,YAAD,EAA6B;MACtC,IAAE,CAAGkL,aAAL,EACE,OAAO,EAAP;MAGF,IAAInG,aAAa,GAAGhF,yCAAgB,CAACC,YAAD,EAAesL,UAAf,CAApC;MACA,IAAIrG,SAAS,GAAG,IAAIC,oBAAJ,CAAkBJ,MAAlB,EAA0BC,aAA1B,CAAhB;MACA,OAAOE,SAAS,CAACE,MAAV,CAAiB7B,SAAjB,CAAP;IACD;;EA1EI,CAAP;AA4ED;;SAEQwJ,uCAAiB9K,MAAiB6J,MAAc5L,SAA6C;EACpG,QAAQ4L,IAAR;IACE,KAAK,KAAL;MAAY;QACV,IAAIqC,IAAI,GAAGlM,IAAI,CAACJ,QAAL,CAAc+K,OAAd,EAAX;QACA,OAAO;UACLvN,KAAK,EAAE8O,IAAI,CAAC3N,OAAL,CAAayB,IAAI,CAACT,GAAlB,CADF;UAELlC,QAAQ,EAAE,CAFL;UAGLC,QAAQ,EAAE4O,IAAI,CAAC9B,MAAL,GAAc;QAHnB,CAAP;MAKD;;IACD,KAAK,MAAL;MACE,OAAO;QACLhN,KAAK,EAAE4C,IAAI,CAACvC,IADP;QAELJ,QAAQ,EAAE,CAFL;QAGLC,QAAQ,EAAE0C,IAAI,CAACJ,QAAL,CAAcuM,aAAd,CAA4BnM,IAA5B;MAHL,CAAP;;IAKF,KAAK,OAAL;MACE,OAAO;QACL5C,KAAK,EAAE4C,IAAI,CAACtC,KADP;QAELL,QAAQ,EAAE+O,4BAAqB,CAACpM,IAAD,CAF1B;QAGL1C,QAAQ,EAAE0C,IAAI,CAACJ,QAAL,CAAcyM,eAAd,CAA8BrM,IAA9B;MAHL,CAAP;;IAKF,KAAK,KAAL;MACE,OAAO;QACL5C,KAAK,EAAE4C,IAAI,CAACrC,GADP;QAELN,QAAQ,EAAEiP,2BAAoB,CAACtM,IAAD,CAFzB;QAGL1C,QAAQ,EAAE0C,IAAI,CAACJ,QAAL,CAAc2M,cAAd,CAA6BvM,IAA7B;MAHL,CAAP;EAtBJ;;EA6BA,IAAI,UAAUA,IAAd,EACE,QAAQ6J,IAAR;IACE,KAAK,WAAL;MACE,OAAO;QACLzM,KAAK,EAAE4C,IAAI,CAACpC,IAAL,IAAa,EAAb,GAAkB,EAAlB,GAAuB,CADzB;QAELP,QAAQ,EAAE,CAFL;QAGLC,QAAQ,EAAE;MAHL,CAAP;;IAKF,KAAK,MAAL;MACE,IAAIW,OAAO,CAACgB,MAAZ,EAAoB;QAClB,IAAI+M,IAAI,GAAGhM,IAAI,CAACpC,IAAL,IAAa,EAAxB;QACA,OAAO;UACLR,KAAK,EAAE4C,IAAI,CAACpC,IADP;UAELP,QAAQ,EAAE2O,IAAI,GAAG,EAAH,GAAQ,CAFjB;UAGL1O,QAAQ,EAAE0O,IAAI,GAAG,EAAH,GAAQ;QAHjB,CAAP;MAKD;;MAED,OAAO;QACL5O,KAAK,EAAE4C,IAAI,CAACpC,IADP;QAELP,QAAQ,EAAE,CAFL;QAGLC,QAAQ,EAAE;MAHL,CAAP;;IAKF,KAAK,QAAL;MACE,OAAO;QACLF,KAAK,EAAE4C,IAAI,CAACnC,MADP;QAELR,QAAQ,EAAE,CAFL;QAGLC,QAAQ,EAAE;MAHL,CAAP;;IAKF,KAAK,QAAL;MACE,OAAO;QACLF,KAAK,EAAE4C,IAAI,CAAClC,MADP;QAELT,QAAQ,EAAE,CAFL;QAGLC,QAAQ,EAAE;MAHL,CAAP;EA7BJ;EAqCF,OAAO,EAAP;AACD;;SAEQ6N,iCAAW/N,OAAkB4N,MAAcE,QAAgBjN,SAA6C;EAC/G,QAAQ+M,IAAR;IACE,KAAK,KAAL;IACA,KAAK,MAAL;IACA,KAAK,OAAL;IACA,KAAK,KAAL;MACE,OAAO5N,KAAK,CAACoP,KAAN,CAAYxB,IAAZ,EAAkBE,MAAlB,EAA0B;QAACuB,KAAK,EAAEzB,IAAI,KAAK;MAAjB,CAA1B,CAAP;EALJ;;EAQA,IAAI,UAAU5N,KAAd,EACE,QAAQ4N,IAAR;IACE,KAAK,WAAL;MAAkB;QAChB,IAAI0B,KAAK,GAAGtP,KAAK,CAACQ,IAAlB;QACA,IAAIoO,IAAI,GAAGU,KAAK,IAAI,EAApB;QACA,OAAOtP,KAAK,CAAC8C,GAAN,CAAU;UAACtC,IAAI,EAAEoO,IAAI,GAAGU,KAAK,GAAG,EAAX,GAAgBA,KAAK,GAAG;QAAnC,CAAV,CAAP;MACD;;IACD,KAAK,MAAL;IACA,KAAK,QAAL;IACA,KAAK,QAAL;MACE,OAAOtP,KAAK,CAACoP,KAAN,CAAYxB,IAAZ,EAAkBE,MAAlB,EAA0B;QAC/BuB,KAAK,EAAEzB,IAAI,KAAK,MADe;QAE/BhM,SAAS,EAAEf,OAAO,CAACgB,MAAR,GAAiB,EAAjB,GAAsB;MAFF,CAA1B,CAAP;EATJ;AAeH;;SAEQyM,iCAAWtO,OAAkB4N,MAAc2B,cAAsB1O,SAA6C;EACrH,QAAQ+M,IAAR;IACE,KAAK,KAAL;IACA,KAAK,OAAL;IACA,KAAK,MAAL;IACA,KAAK,KAAL;MACE,OAAO5N,KAAK,CAAC8C,GAAN,CAAU;SAAE8K,OAAO2B;MAAT,CAAV,CAAP;EALJ;;EAQA,IAAI,UAAUvP,KAAd,EACE,QAAQ4N,IAAR;IACE,KAAK,WAAL;MAAkB;QAChB,IAAI0B,KAAK,GAAGtP,KAAK,CAACQ,IAAlB;QACA,IAAIgP,KAAK,GAAGF,KAAK,IAAI,EAArB;QACA,IAAIV,IAAI,GAAGW,YAAY,IAAI,EAA3B;QACA,IAAIX,IAAI,KAAKY,KAAb,EACE,OAAOxP,KAAP;QAEF,OAAOA,KAAK,CAAC8C,GAAN,CAAU;UAACtC,IAAI,EAAEgP,KAAK,GAAGF,KAAK,GAAG,EAAX,GAAgBA,KAAK,GAAG;QAApC,CAAV,CAAP;MACD;;IACD,KAAK,MAAL;MACE;MACA,IAAIzO,OAAO,CAACgB,MAAZ,EAAoB;QAClB,IAAIyN,KAAK,GAAGtP,KAAK,CAACQ,IAAlB;QACA,IAAIgP,KAAK,GAAGF,KAAK,IAAI,EAArB;QACA,IAAE,CAAGE,KAAH,IAAYD,YAAY,KAAK,EAA/B,EACEA,YAAY,GAAG,CAAf;QAEF,IAAIC,KAAK,IAAID,YAAY,GAAG,EAA5B,EACEA,YAAY,IAAI,EAAhB;MAEH;;IACD;;IACF,KAAK,QAAL;IACA,KAAK,QAAL;MACE,OAAOvP,KAAK,CAAC8C,GAAN,CAAU;SAAE8K,OAAO2B;MAAT,CAAV,CAAP;EAzBJ;AA4BH;;SC1beE,yCAAwB/L,OAA0D;MAgF3EC,KACF+L;EAhFnB,IAAI9L,YAAY,GAAGC,6BAAsB,CAACH,KAAD,CAAzC;EACA,IAAG,CAAEiM,eAAF,EAAmBC,kBAAnB,IAAyC7L,yBAAkB,CAAYL,KAAK,CAAC1D,KAAlB,EAAyB0D,KAAK,CAACM,YAAN,IAAsB,IAA/C,EAAqDN,KAAK,CAACO,QAA3D,CAA9D;EACA,IAAG,CAAE5B,gBAAF,EAAoBwN,mBAApB,IAA2CrL,eAAQ,OAAOmL,eAAe,IAAI;IAACG,KAAK,EAAE,IAAR;IAAcC,GAAG,EAAE;EAAnB,CAA1B,CAAtD,CAHgG,CAKhG;;EACA,IAAIJ,eAAe,IAAI,IAAnB,IAA2BtN,gBAAgB,CAACyN,KAA5C,IAAqDzN,gBAAgB,CAAC0N,GAA1E,EAA+E;IAC7E1N,gBAAgB,GAAG;MAACyN,KAAK,EAAE,IAAR;MAAcC,GAAG,EAAE;IAAnB,CAAnB;IACAF,mBAAmB,CAACxN,gBAAD,CAAnB;EACD;;EAED,IAAIuJ,MAAK,GAAG+D,eAAe,IAAItN,gBAA/B;;EAEA,IAAIyB,QAAQ,GAAI9D,KAAJ,IAAyB;IACnC6P,mBAAmB,CAAC7P,KAAD,CAAnB;IACA,IAAE,CAAEA,KAAK,SAAL,SAAK,KAAL,uBAAK,CAAE8P,KAAT,KAAkB9P,KAAK,CAAC+P,GAA1B,EACEH,kBAAkB,CAAC5P,KAAD,CAAlB,CADF,KAGE4P,kBAAkB,CAAC,IAAD,CAAlB;EAEH,CAPD;;EASA,IAAIzM,CAAC,IAAIyI,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEkE,KAAX,MAAoBlE,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEmE,GAA3B,KAAkCrM,KAAK,CAACrB,gBAA7C;EACA,IAAG,CAAEvB,WAAF,IAAiBoC,yCAAe,CAACC,CAAD,EAAIO,KAAK,CAAC5C,WAAV,CAAnC;EACA,IAAIiB,OAAO,GAAGjB,WAAW,KAAK,MAAhB,IAA0BA,WAAW,KAAK,QAA1C,IAAsDA,WAAW,KAAK,QAAtE,IAAkFA,WAAW,KAAK,aAAhH;;MAC0BsD;;EAA1B,IAAIC,mBAAmB,IAAGD,oBAAyB,GAAzBV,KAAK,CAACW,mBAAT,MAA4B,IAA5B,IAAGD,oBAAyB,WAA5B,GAAGA,oBAAH,GAAgC,IAAvD;EAEA,IAAG,CAAE4L,UAAF,EAAaC,oBAAb,IAAqCzL,eAAQ,CAAY,IAAZ,CAAhD;EACA,IAAG,CAAE0L,UAAF,EAAaC,oBAAb,IAAqC3L,eAAQ,CAAY,IAAZ,CAAhD;;EAEA,IAAIoH,MAAK,IAAIA,MAAK,CAACkE,KAAf,IAAwBlE,MAAK,CAACmE,GAAlC,EAAuC;IACrCC,UAAS,GAAGpE,MAAZ;IACA,IAAI,UAAUA,MAAK,CAACkE,KAApB,EACEI,UAAS,GAAGtE,MAAZ;EAEH;;EAED,IAAIjH,WAAW,IAAIyL,SAAJ,EAA0BC,SAA1B,KAAmD;IAChEvM,QAAQ,CAAC;MACPgM,KAAK,EAAE,cAAcO,SAAS,CAACP,KAAxB,GAAgCO,SAAS,CAACP,KAAV,CAAgBhN,GAAhB,CAAoBE,qBAAc,CAACoN,SAAS,CAACN,KAAX,CAAlC,CAAhC,GAAuF7M,yBAAkB,CAACmN,SAAS,CAACN,KAAX,EAAkBO,SAAS,CAACP,KAA5B,CADzG;MAEPC,GAAG,EAAE,cAAcM,SAAS,CAACN,GAAxB,GAA8BM,SAAS,CAACN,GAAV,CAAcjN,GAAd,CAAkBE,qBAAc,CAACoN,SAAS,CAACL,GAAX,CAAhC,CAA9B,GAAiF9M,yBAAkB,CAACmN,SAAS,CAACL,GAAX,EAAgBM,SAAS,CAACN,GAA1B;IAFjG,CAAD,CAAR;EAID,CALD,CArCgG,CA4ChG;;;EACA,IAAIO,YAAY,GAAIC,KAAJ,IAAyB;IACvC,IAAIxL,WAAW,GAAG,OAAOV,mBAAP,KAA+B,UAA/B,GAA4CA,mBAAmB,EAA/D,GAAoEA,mBAAtF;;IACA,IAAItC,OAAJ,EAAW;MACT,IAAIgD,WAAW,IAAKwL,KAAK,CAACT,KAAN,IAAeS,KAAK,CAACR,GAArB,KAA4BG,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEJ,KAAvC,MAAgDI,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEH,GAA3D,CAApB,EACEpL,WAAW,CAAC4L,KAAD,EAAQ;QACjBT,KAAK,GAAEI,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEJ,KAAb,KAAsB1N,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP,CAD5B;QAEjB0N,GAAG,GAAEG,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEH,GAAb,KAAoB3N,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP;MAFxB,CAAR,CAAX,CADF,KAME4N,oBAAoB,CAACM,KAAD,CAApB;KAPJ,MASO,IAAIA,KAAK,CAACT,KAAN,IAAeS,KAAK,CAACR,GAAzB,EACLjM,QAAQ,CAACyM,KAAD,CAAR,CADK,KAGLN,oBAAoB,CAACM,KAAD,CAApB;;IAGF,IAAIxL,WAAJ,EACEnB,YAAY,CAACoB,OAAb,CAAqB,KAArB;EAEH,CApBD;;EAsBA,IAAIwL,YAAY,GAAID,KAAJ,IAAyB;IACvC,IAAE,CAAEP,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEF,KAAb,MAAsBE,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAED,GAAjC,KAAwCQ,KAAK,CAACT,KAA9C,IAAuDS,KAAK,CAACR,GAA/D,EACEpL,WAAW,CAACqL,UAAD,EAAYO,KAAZ,CAAX,CADF,KAGEJ,oBAAoB,CAACI,KAAD,CAApB;EAEH,CAND;;EAQA,IAAIrL,eAAe,GAAoBxB,KAAK,CAACwB,eAAN,KACjC0G,MAAK,IAAI,IAAT,KACF7L,yCAAS,CAAC6L,MAAK,CAACkE,KAAP,EAAcpM,KAAK,CAACzD,QAApB,EAA8ByD,KAAK,CAACxD,QAApC,CAAT,IACAH,yCAAS,CAAC6L,MAAK,CAACmE,GAAP,EAAYrM,KAAK,CAACzD,QAAlB,EAA4ByD,KAAK,CAACxD,QAAlC,CADT,IAEC0L,MAAK,CAACmE,GAAN,IAAa,IAAb,IAAqBnE,MAAK,CAACkE,KAAN,IAAe,IAApC,IAA4ClE,MAAK,CAACmE,GAAN,CAAU5P,OAAV,CAAkByL,MAAK,CAACkE,KAAxB,IAAiC,CAF9E,IAE+E,CAC9ElE,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEkE,KADuE,MAClE,CAAInM,GAAuB,GAAvBD,KAAK,CAACyB,iBAAV,MAA2B,IAA3B,IAAIxB,GAAuB,KAAvB,MAAJ,GAAI,MAAJ,GAAIA,GAAuB,CAAvByB,YAA0BwG,MAAK,CAACkE,KAAhC,CAD8D,CAF/E,IAGsD,CACrDlE,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEmE,GAD8C,MAC3C,CAAIL,IAAuB,GAAvBhM,KAAK,CAACyB,iBAAV,MAA2B,IAA3B,IAAIuK,IAAuB,KAAvB,MAAJ,GAAI,MAAJ,GAAIA,IAAuB,CAAvBtK,YAA0BwG,MAAK,CAACmE,GAAhC,CADuC,CAJpD,IAMA,SANA,GAMY,IAPqB,CAAvC;EASA,OAAO;WACLnE,MADK;cAEL9H,QAFK;eAGLkM,UAHK;eAILE,UAJK;iBAKLpP,WALK;aAMLiB,OANK;;IAOL8J,OAAO,CAAC+B,IAAD,EAAOhL,IAAP,EAAa;MAClB0N,YAAY,CAAC,KAAIN,UAAJ;SAAgBpC,OAAOhL;MAAvB,CAAD,CAAZ;IACD,CATI;;IAUL6N,OAAO,CAAC7C,IAAD,EAAOhJ,IAAP,EAAa;MAClB4L,YAAY,CAAC,KAAIN,UAAJ;SAAgBtC,OAAOhJ;MAAvB,CAAD,CAAZ;IACD,CAZI;;IAaL8L,WAAW,CAAC9C,IAAD,EAAO+C,QAAP,EAAiB;MAC1B7M,QAAQ,CAAC,KAAI8H,MAAJ;SAAYgC,OAAO+C;MAAnB,CAAD,CAAR;IACD,CAfI;;kBAgBLL,YAhBK;kBAiBLE,YAjBK;IAkBLhL,MAAM,EAAE5B,YAAY,CAAC4B,MAlBhB;;IAmBLR,OAAO,CAACQ,MAAD,EAAS;MACd;MACA;MACA;MACA,IAAE,CAAGA,MAAH,IAAS,GAAMoG,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEkE,KAAb,MAAsBlE,MAAK,SAAL,UAAK,KAAL,wBAAK,CAAEmE,GAA7B,EAAT,KAA8CC,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEF,KAAzD,MAAkEE,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAED,GAA7E,KAAoFhO,OAAtF,EACE4C,WAAW,CAACqL,UAAD,EAAY;QACrBF,KAAK,GAAEI,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEJ,KAAb,KAAsB1N,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP,CADxB;QAErB0N,GAAG,GAAEG,UAAS,SAAT,cAAS,KAAT,4BAAS,CAAEH,GAAb,KAAoB3N,yCAAkB,CAACsB,KAAK,CAACrB,gBAAP;MAFpB,CAAZ,CAAX;MAMFuB,YAAY,CAACoB,OAAb,CAAqBQ,MAArB;IACD,CA/BI;;qBAgCLN,eAhCK;;IAiCLO,WAAW,CAACC,MAAD,EAAS9E,YAAT,EAAuB;MAChC,IAAE,CAAGgL,MAAH,IAAQ,CAAKA,MAAK,CAACkE,KAAnB,IAAwB,CAAKlE,MAAK,CAACmE,GAArC,EACE,OAAO,IAAP;MAGF,IAAIa,aAAa,GAAG,cAAchF,MAAK,CAACkE,KAApB,GAA4BlE,MAAK,CAACkE,KAAN,CAAYhO,QAAxC,GAAmDW,SAAvE;MACA,IAAIoO,gBAAgB,GAAGnN,KAAK,CAAC5C,WAAN,KAAsB8K,MAAK,CAACkE,KAAN,IAAe,YAAYlE,MAAK,CAACkE,KAAjC,GAAyC,QAAzC,GAAoD,KAA1E,CAAvB;MACA,IAAIgB,WAAW,GAAG,cAAclF,MAAK,CAACmE,GAApB,GAA0BnE,MAAK,CAACmE,GAAN,CAAUjO,QAApC,GAA+CW,SAAjE;MACA,IAAIsO,cAAc,GAAGrN,KAAK,CAAC5C,WAAN,KAAsB8K,MAAK,CAACmE,GAAN,IAAa,YAAYnE,MAAK,CAACmE,GAA/B,GAAqC,QAArC,GAAgD,KAAtE,CAArB;MAEA,IAAIiB,YAAY,GAAGrQ,yCAAgB,CAACC,YAAD,EAAe;QAChDE,WAAW,EAAE+P,gBADmC;QAEhD/O,QAAQ,EAAE8O,aAFsC;QAGhD5O,YAAY,EAAE0B,KAAK,CAAC1B,YAH4B;QAIhDJ,SAAS,EAAE8B,KAAK,CAAC9B,SAJ+B;QAKhDM,OAAO,EAAG0J,MAAK,CAACkE,KAAN,CAAYtN,QAAZ,CAAqBoD,UAArB,KAAoC,SAApC,IAAiDgG,MAAK,CAACkE,KAAN,CAAY3N,GAAZ,KAAoB,IAArE,IACPyJ,MAAK,CAACmE,GAAN,CAAUvN,QAAV,CAAmBoD,UAAnB,KAAkC,SAAlC,IAA+CgG,MAAK,CAACmE,GAAN,CAAU5N,GAAV,KAAkB;MANpB,CAAf,CAAnC;MASA,IAAI8O,SAAS,GAAGrF,MAAK,CAACkE,KAAN,CAAY3L,MAAZ,CAAmByM,aAAa,IAAI,KAApC,CAAhB;MACA,IAAIM,OAAO,GAAGtF,MAAK,CAACmE,GAAN,CAAU5L,MAAV,CAAiB2M,WAAW,IAAI,KAAhC,CAAd;MAEA,IAAIK,cAAc,GAAG,IAAIrL,oBAAJ,CAAkBJ,MAAlB,EAA0BsL,YAA1B,CAArB;MACA,IAAII,YAAJ;;MACA,IAAIR,aAAa,KAAKE,WAAlB,IAAiCD,gBAAgB,KAAKE,cAAtD,IAAwEnF,MAAK,CAACkE,KAAN,CAAY3P,OAAZ,CAAoByL,MAAK,CAACmE,GAA1B,MAAmC,CAA/G,EAAkH;QAChH;QACA;QACA;QACA,IAAI;UACF,IAAIsB,KAAK,GAAGF,cAAc,CAACG,kBAAf,CAAkCL,SAAlC,EAA6CC,OAA7C,CAAZ,CADE,CAGF;UACA;;UACA,IAAIK,cAAc,GAAG,EAArB;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACrE,MAA1B,EAAkCwE,CAAC,EAAnC,EAAuC;YACrC,IAAI5D,IAAI,GAAGyD,KAAK,CAACG,CAAD,CAAhB;YACA,IAAI5D,IAAI,CAAC6D,MAAL,KAAgB,QAAhB,IAA4B7D,IAAI,CAACnB,IAAL,KAAc,SAA9C,EACE8E,cAAc,GAAGC,CAAjB,CADF,KAEO,IAAI5D,IAAI,CAAC6D,MAAL,KAAgB,UAApB,EACL;UAEH,CAbC,CAeF;;;UACA,IAAI3B,KAAK,GAAG,EAAZ;UACA,IAAIC,GAAG,GAAG,EAAV;;UACA,KAAK,IAAI2B,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGL,KAAK,CAACrE,MAA1B,EAAkC0E,EAAC,EAAnC,EAAuC;YACrC,IAAIA,EAAC,GAAGH,cAAR,EACEzB,KAAK,IAAIuB,KAAK,CAACK,EAAD,CAAL,CAAS1R,KAAlB,CADF,KAEO,IAAI0R,EAAC,GAAGH,cAAR,EACLxB,GAAG,IAAIsB,KAAK,CAACK,EAAD,CAAL,CAAS1R,KAAhB;UAEH;;UAED,OAAO;mBAAC8P,KAAD;iBAAQC;UAAR,CAAP;QACD,CA3BD,CA2BE,OAAO4B,CAAP,EAAU,CACV;QACD;;QAEDP,YAAY,GAAGD,cAAf;MACD,CApCD,MAoCO;QACL,IAAIS,UAAU,GAAGjR,yCAAgB,CAACC,YAAD,EAAe;UAC9CE,WAAW,EAAEiQ,cADiC;UAE9CjP,QAAQ,EAAEgP,WAFoC;UAG9C9O,YAAY,EAAE0B,KAAK,CAAC1B,YAH0B;UAI9CJ,SAAS,EAAE8B,KAAK,CAAC9B;QAJ6B,CAAf,CAAjC;QAOAwP,YAAY,GAAG,IAAItL,oBAAJ,CAAkBJ,MAAlB,EAA0BkM,UAA1B,CAAf;MACD;;MAED,OAAO;QACL9B,KAAK,EAAEqB,cAAc,CAACpL,MAAf,CAAsBkL,SAAtB,CADF;QAELlB,GAAG,EAAEqB,YAAY,CAACrL,MAAb,CAAoBmL,OAApB;MAFA,CAAP;IAID;;EA5GI,CAAP;AA8GD;;SC/OeW,0CAAkBnO,OAA8C;EAC9E,IAAI;IACFrB,gBAAgB,GAAG,IAAIC,WAAJ,EADjB;IACyBrC,UAC3BA,QAFE;IAEMC,UACRA,QAHE;IAGMY,aACRA;EAJE,IAKA4C,KALJ;EAOA,IAAG,CAAE1D,KAAF,EAAS8D,QAAT,IAAqBC,yBAAkB,CACxCL,KAAK,CAAC1D,KADkC,EAExC0D,KAAK,CAACM,YAFkC,EAGxCN,KAAK,CAACO,QAHkC,CAA1C;EAMA,IAAId,CAAC,GAAGnD,KAAK,IAAIqC,gBAAjB;EACA,IAAI9B,GAAG,GAAG4C,CAAC,IAAI,SAASA,CAAd,GAAkBA,CAAlB,GAAsBV,SAAhC;EACA,IAAIsJ,eAAe,GAAGL,cAAO,OAAOoG,kCAAY,CAACzP,gBAAD,CAAnB,EAAuC,CAACA,gBAAD,CAAvC,CAA7B;EACA,IAAI0P,OAAO,GAAGrG,cAAO,OAAOoG,kCAAY,CAAC7R,QAAD,EAAWM,GAAX,CAAnB,EAAoC,CAACN,QAAD,EAAWM,GAAX,CAApC,CAArB;EACA,IAAIyR,OAAO,GAAGtG,cAAO,OAAOoG,kCAAY,CAAC5R,QAAD,EAAWK,GAAX,CAAnB,EAAoC,CAACL,QAAD,EAAWK,GAAX,CAApC,CAArB;EAEA,IAAIoQ,QAAQ,GAAGjF,cAAO,OAAO1L,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAuB8R,kCAAY,CAAC9R,KAAD,CAA1C,EAAmD,CAACA,KAAD,CAAnD,CAAtB;;EACA,IAAIiE,QAAQ,GAAGa,QAAH,IAAe;IACzBhB,QAAQ,CAACX,CAAC,IAAI,SAASA,CAAd,GAAkB2B,QAAlB,GAA6BA,QAAQ,IAAImN,aAAM,CAACnN,QAAD,CAAhD,CAAR;EACD,CAFD;;EAIA,OAAOqG,yCAAiB,CAAC,KACpBzH,KADoB;IAEvB1D,KAAK,EAAE2Q,QAFgB;IAGvB3M,YAAY,EAAEvB,SAHS;IAIvBxC,QAAQ,EAAE8R,OAJa;IAKvB7R,QAAQ,EAAE8R,OALa;cAMvB/N,QANuB;IAOvBnD,WAAW,EAAEA,WAAW,IAAI,QAPL;IAQvBM,cAAc,EAAE,MARO;IASvBiB,gBAAgB,EAAE0J,eATK;IAUvB;IACAX,cAAc,QAAQ,IAAI8B,wBAAJ;EAXC,CAAD,CAAxB;AAaD;;SAEQ4E,mCAAa9R,OAA+D;EAAA,IAA7C4C,IAA6C,uEAA3BsP,YAAK,CAACC,uBAAgB,EAAjB,CAAsB;EACnF,IAAE,CAAGnS,KAAL,EACE,OAAO,IAAP;EAGF,IAAI,SAASA,KAAb,EACE,OAAOA,KAAP;EAGF,OAAOiD,yBAAkB,CAACL,IAAD,EAAO5C,KAAP,CAAzB;AACD","names":["$35a22f14a1f04b11$export$eac50920cf2fd59a","value","minValue","maxValue","compare","$35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS","year","month","day","hour","minute","second","$35a22f14a1f04b11$export$7e319ea407e63bc0","fieldOptions","options","granularity","keys","Object","_maxGranularity","startIdx","indexOf","maxGranularity","endIdx","Error","opts1","slice","reduce","opts","key","hourCycle","hour12","timeZone","hasTime","hideTimeZone","timeZoneName","showEra","era","$35a22f14a1f04b11$export$c5221a78ef73c5e9","placeholderValue","$7UzoM$Time","$35a22f14a1f04b11$export$61a490a80c552550","calendar","undefined","$7UzoM$toCalendar","$35a22f14a1f04b11$export$66aa2b09de4b1ea5","date","$7UzoM$now","set","millisecond","$7UzoM$toCalendarDate","$7UzoM$toCalendarDateTime","$35a22f14a1f04b11$export$2440da353cedad43","v","lastValue","$7UzoM$useRef","current","defaultTimeZone","toString","$ab5bf3f618090389$export$87194bb378cc3ac2","props","ref","overlayState","$7UzoM$useOverlayTriggerState","setValue","$7UzoM$useControlledState","defaultValue","onChange","dateValue","toDate","_shouldCloseOnSelect","shouldCloseOnSelect","selectedDate","setSelectedDate","$7UzoM$useState","selectedTime","setSelectedTime","commitValue","time","selectDate","newValue","shouldClose","setOpen","selectTime","validationState","isDateUnavailable","call","timeValue","setDateValue","setTimeValue","isOpen","formatValue","locale","formatOptions","identifier","formatter","$7UzoM$DateFormatter","format","$3e3ed55ab2966714$var$placeholders","$7UzoM$MessageDictionary","ach","af","am","an","ar","ast","az","be","bg","bn","br","bs","ca","cak","ckb","cs","cy","da","de","dsb","el","en","eo","es","et","eu","fa","ff","fi","fr","fy","ga","gd","gl","he","hr","hsb","hu","ia","id","it","ja","ka","kk","kn","ko","lb","lo","lt","lv","meh","ml","ms","nl","nn","no","oc","pl","pt","rm","ro","ru","sc","scn","sk","sl","sr","sv","szl","tg","th","tr","uk","$3e3ed55ab2966714$export$d3f5c5e0a5023fa0","field","getStringForLocale","$3c0fc76039f1c516$var$EDITABLE_SEGMENTS","dayPeriod","$3c0fc76039f1c516$var$PAGE_STEP","$3c0fc76039f1c516$var$TYPE_MAPPING","dayperiod","$3c0fc76039f1c516$export$60e84778edff6d26","createCalendar","isDisabled","isReadOnly","isRequired","v1","defaultFormatter","$7UzoM$useMemo","resolvedOptions","value1","setDate","calendarValue","placeholderDate","setPlaceholderDate","val","formatOpts","dateFormatter","allSegments","formatToParts","Date","filter","seg","type","p","validSegments","setValidSegments","lastCalendarIdentifier","$7UzoM$useEffect","placeholder","length","displayValue","$7UzoM$GregorianCalendar","segments","map","segment","isEditable","getEras","isPlaceholder","text","$3c0fc76039f1c516$var$getSegmentLimits","markValid","part","adjustSegment","amount","$3c0fc76039f1c516$var$addSegment","_maxGranularity1","increment","decrement","incrementPage","decrementPage","setSegment","$3c0fc76039f1c516$var$setSegment","confirmPlaceholder","validKeys","allKeys","copy","clearSegment","isPM","shouldBePM","eras","getYearsInEra","$7UzoM$getMinimumMonthInYear","getMonthsInYear","$7UzoM$getMinimumDayInMonth","getDaysInMonth","cycle","round","hours","segmentValue","wasPM","$93c38a5e28be6249$export$e50a61c1de9f574","ref1","controlledValue","setControlledValue","setPlaceholderValue","start","end","dateRange1","setSelectedDateRange","timeRange1","setSelectedTimeRange","dateRange","timeRange","setDateRange","range","setTimeRange","setTime","setDateTime","dateTime","startTimeZone","startGranularity","endTimeZone","endGranularity","startOptions","startDate","endDate","startFormatter","endFormatter","parts","formatRangeToParts","separatorIndex","i","source","i1","e","endOptions","$eff5d8ee529ac4bb$export$fd53cef0cc796101","$eff5d8ee529ac4bb$var$convertValue","minDate","maxDate","$7UzoM$toTime","$7UzoM$today","$7UzoM$getLocalTimeZone"],"sources":["/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/utils.ts","/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/useDatePickerState.ts","/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/placeholders.ts","/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/useDateFieldState.ts","/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/useDateRangePickerState.ts","/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/useTimeFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, now, Time, toCalendar, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {useRef} from 'react';\n\nexport function isInvalid(value: DateValue, minValue: DateValue, maxValue: DateValue) {\n  return value != null && (\n    (minValue != null && value.compare(minValue) < 0) ||\n    (maxValue != null && value.compare(maxValue) > 0)\n  );\n}\n\nexport type FieldOptions = Pick<Intl.DateTimeFormatOptions, 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second'>;\ninterface FormatterOptions {\n  timeZone?: string,\n  hideTimeZone?: boolean,\n  granularity?: DatePickerProps<any>['granularity'],\n  maxGranularity?: 'year' | 'month' | DatePickerProps<any>['granularity'],\n  hourCycle?: 12 | 24,\n  showEra?: boolean\n}\n\nconst DEFAULT_FIELD_OPTIONS: FieldOptions = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nexport function getFormatOptions(\n  fieldOptions: FieldOptions,\n  options: FormatterOptions\n): Intl.DateTimeFormatOptions {\n  fieldOptions = {...DEFAULT_FIELD_OPTIONS, ...fieldOptions};\n  let granularity = options.granularity || 'minute';\n  let keys = Object.keys(fieldOptions);\n  let startIdx = keys.indexOf(options.maxGranularity ?? 'year');\n  if (startIdx < 0) {\n    startIdx = 0;\n  }\n\n  let endIdx = keys.indexOf(granularity);\n  if (endIdx < 0) {\n    endIdx = 2;\n  }\n\n  if (startIdx > endIdx) {\n    throw new Error('maxGranularity must be greater than granularity');\n  }\n\n  let opts: Intl.DateTimeFormatOptions = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {\n    opts[key] = fieldOptions[key];\n    return opts;\n  }, {});\n\n  if (options.hourCycle != null) {\n    opts.hour12 = options.hourCycle === 12;\n  }\n\n  opts.timeZone = options.timeZone || 'UTC';\n\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  if (hasTime && options.timeZone && !options.hideTimeZone) {\n    opts.timeZoneName = 'short';\n  }\n\n  if (options.showEra && startIdx === 0) {\n    opts.era = 'short';\n  }\n\n  return opts;\n}\n\nexport function getPlaceholderTime(placeholderValue: DateValue): TimeValue {\n  if (placeholderValue && 'hour' in placeholderValue) {\n    return placeholderValue;\n  }\n\n  return new Time();\n}\n\nexport function convertValue(value: DateValue, calendar: Calendar): DateValue {\n  if (value === null) {\n    return null;\n  }\n\n  if (!value) {\n    return undefined;\n  }\n\n  return toCalendar(value, calendar);\n}\n\n\nexport function createPlaceholderDate(placeholderValue: DateValue, granularity: string, calendar: Calendar, timeZone: string) {\n  if (placeholderValue) {\n    return convertValue(placeholderValue, calendar);\n  }\n\n  let date = toCalendar(now(timeZone).set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  }), calendar);\n\n  if (granularity === 'year' || granularity === 'month' || granularity === 'day') {\n    return toCalendarDate(date);\n  }\n\n  if (!timeZone) {\n    return toCalendarDateTime(date);\n  }\n\n  return date;\n}\n\nexport function useDefaultProps(v: DateValue, granularity: Granularity): [Granularity, string] {\n  // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n  let lastValue = useRef(v);\n  if (v) {\n    lastValue.current = v;\n  }\n\n  v = lastValue.current;\n  let defaultTimeZone = (v && 'timeZone' in v ? v.timeZone : undefined);\n  granularity = granularity || (v && 'minute' in v ? 'minute' : 'day');\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  return [granularity, defaultTimeZone];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, useDefaultProps} from './utils';\nimport {isInvalid} from './utils';\nimport {useControlledState} from '@react-stately/utils';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface DatePickerStateOptions extends DatePickerProps<DateValue> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\nexport interface DatePickerState {\n  /** The currently selected date. */\n  value: DateValue,\n  /** Sets the selected date. */\n  setValue(value: DateValue): void,\n  /**\n   * The date portion of the value. This may be set prior to `value` if the user has\n   * selected a date but has not yet selected a time.\n   */\n  dateValue: DateValue,\n  /** Sets the date portion of the value. */\n  setDateValue(value: CalendarDate): void,\n  /**\n   * The time portion of the value. This may be set prior to `value` if the user has\n   * selected a time but has not yet selected a date.\n   */\n  timeValue: TimeValue,\n  /** Sets the time portion of the value. */\n  setTimeValue(value: TimeValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date picker supports selecting a time, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /** The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** Formats the selected value using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): string\n}\n\n/**\n * Provides state management for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePickerState(props: DatePickerStateOptions): DatePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [value, setValue] = useControlledState<DateValue>(props.value, props.defaultValue || null, props.onChange);\n\n  let v = (value || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone ?? 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second' || granularity === 'millisecond';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [selectedDate, setSelectedDate] = useState<DateValue>(null);\n  let [selectedTime, setSelectedTime] = useState<TimeValue>(null);\n\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) {\n      selectedTime = value;\n    }\n  }\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let commitValue = (date: DateValue, time: TimeValue) => {\n    setValue('timeZone' in time ? time.set(toCalendarDate(date)) : toCalendarDateTime(date, time));\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = (newValue: CalendarDate) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) {\n        commitValue(newValue, selectedTime || getPlaceholderTime(props.placeholderValue));\n      } else {\n        setSelectedDate(newValue);\n      }\n    } else {\n      setValue(newValue);\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let selectTime = (newValue: TimeValue) => {\n    if (selectedDate) {\n      commitValue(selectedDate, newValue);\n    } else {\n      setSelectedTime(newValue);\n    }\n  };\n\n  let validationState: ValidationState = props.validationState ||\n    (isInvalid(value, props.minValue, props.maxValue) ? 'invalid' : null) ||\n    (value && props.isDateUnavailable?.(value) ? 'invalid' : null);\n\n  return {\n    value,\n    setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity,\n    hasTime,\n    isOpen: overlayState.isOpen,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) {\n        commitValue(selectedDate, selectedTime || getPlaceholderTime(props.placeholderValue));\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, {\n        granularity,\n        timeZone: defaultTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: value.calendar.identifier === 'gregory' && value.era === 'BC'\n      });\n\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MessageDictionary} from '@internationalized/message';\n\n// These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\nconst placeholders = new MessageDictionary({\n  ach: {year: 'mwaka', month: 'dwe', day: 'nino'},\n  af: {year: 'jjjj', month: 'mm', day: 'dd'},\n  am: {year: 'ዓዓዓዓ', month: 'ሚሜ', day: 'ቀቀ'},\n  an: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ar: {year: 'سنة', month: 'شهر', day: 'يوم'},\n  ast: {year: 'aaaa', month: 'mm', day: 'dd'},\n  az: {year: 'iiii', month: 'aa', day: 'gg'},\n  be: {year: 'гггг', month: 'мм', day: 'дд'},\n  bg: {year: 'гггг', month: 'мм', day: 'дд'},\n  bn: {year: 'yyyy', month: 'মিমি', day: 'dd'},\n  br: {year: 'bbbb', month: 'mm', day: 'dd'},\n  bs: {year: 'gggg', month: 'mm', day: 'dd'},\n  ca: {year: 'aaaa', month: 'mm', day: 'dd'},\n  cak: {year: 'jjjj', month: 'ii', day: \"q'q'\"},\n  ckb: {year: 'ساڵ', month: 'مانگ', day: 'ڕۆژ'},\n  cs: {year: 'rrrr', month: 'mm', day: 'dd'},\n  cy: {year: 'bbbb', month: 'mm', day: 'dd'},\n  da: {year: 'åååå', month: 'mm', day: 'dd'},\n  de: {year: 'jjjj', month: 'mm', day: 'tt'},\n  dsb: {year: 'llll', month: 'mm', day: 'źź'},\n  el: {year: 'εεεε', month: 'μμ', day: 'ηη'},\n  en: {year: 'yyyy', month: 'mm', day: 'dd'},\n  eo: {year: 'jjjj', month: 'mm', day: 'tt'},\n  es: {year: 'aaaa', month: 'mm', day: 'dd'},\n  et: {year: 'aaaa', month: 'kk', day: 'pp'},\n  eu: {year: 'uuuu', month: 'hh', day: 'ee'},\n  fa: {year: 'سال', month: 'ماه', day: 'روز'},\n  ff: {year: 'hhhh', month: 'll', day: 'ññ'},\n  fi: {year: 'vvvv', month: 'kk', day: 'pp'},\n  fr: {year: 'aaaa', month: 'mm', day: 'jj'},\n  fy: {year: 'jjjj', month: 'mm', day: 'dd'},\n  ga: {year: 'bbbb', month: 'mm', day: 'll'},\n  gd: {year: 'bbbb', month: 'mm', day: 'll'},\n  gl: {year: 'aaaa', month: 'mm', day: 'dd'},\n  he: {year: 'שנה', month: 'חודש', day: 'יום'},\n  hr: {year: 'gggg', month: 'mm', day: 'dd'},\n  hsb: {year: 'llll', month: 'mm', day: 'dd'},\n  hu: {year: 'éééé', month: 'hh', day: 'nn'},\n  ia: {year: 'aaaa', month: 'mm', day: 'dd'},\n  id: {year: 'tttt', month: 'bb', day: 'hh'},\n  it: {year: 'aaaa', month: 'mm', day: 'gg'},\n  ja: {year: ' 年 ', month: '月', day: '日'},\n  ka: {year: 'წწწწ', month: 'თთ', day: 'რრ'},\n  kk: {year: 'жжжж', month: 'аа', day: 'кк'},\n  kn: {year: 'ವವವವ', month: 'ಮಿಮೀ', day: 'ದಿದಿ'},\n  ko: {year: '연도', month: '월', day: '일'},\n  lb: {year: 'jjjj', month: 'mm', day: 'dd'},\n  lo: {year: 'ປປປປ', month: 'ດດ', day: 'ວວ'},\n  lt: {year: 'mmmm', month: 'mm', day: 'dd'},\n  lv: {year: 'gggg', month: 'mm', day: 'dd'},\n  meh: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ml: {year: 'വർഷം', month: 'മാസം', day: 'തീയതി'},\n  ms: {year: 'tttt', month: 'mm', day: 'hh'},\n  nl: {year: 'jjjj', month: 'mm', day: 'dd'},\n  nn: {year: 'åååå', month: 'mm', day: 'dd'},\n  no: {year: 'åååå', month: 'mm', day: 'dd'},\n  oc: {year: 'aaaa', month: 'mm', day: 'jj'},\n  pl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  pt: {year: 'aaaa', month: 'mm', day: 'dd'},\n  rm: {year: 'oooo', month: 'mm', day: 'dd'},\n  ro: {year: 'aaaa', month: 'll', day: 'zz'},\n  ru: {year: 'гггг', month: 'мм', day: 'дд'},\n  sc: {year: 'aaaa', month: 'mm', day: 'dd'},\n  scn: {year: 'aaaa', month: 'mm', day: 'jj'},\n  sk: {year: 'rrrr', month: 'mm', day: 'dd'},\n  sl: {year: 'llll', month: 'mm', day: 'dd'},\n  sr: {year: 'гггг', month: 'мм', day: 'дд'},\n  sv: {year: 'åååå', month: 'mm', day: 'dd'},\n  szl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  tg: {year: 'сссс', month: 'мм', day: 'рр'},\n  th: {year: 'ปปปป', month: 'ดด', day: 'วว'},\n  tr: {year: 'yyyy', month: 'aa', day: 'gg'},\n  uk: {year: 'рррр', month: 'мм', day: 'дд'},\n  'zh-CN': {year: '年', month: '月', day: '日'},\n  'zh-TW': {year: '年', month: '月', day: '日'}\n}, 'en');\n\nexport function getPlaceholder(field: string, value: string, locale: string) {\n  // Use the actual placeholder value for the era and day period fields.\n  if (field === 'era' || field === 'dayPeriod') {\n    return value;\n  }\n\n  if (field === 'year' || field === 'month' || field === 'day') {\n    return placeholders.getStringForLocale(field, locale);\n  }\n\n  // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n  return '––';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, getMinimumDayInMonth, getMinimumMonthInYear, GregorianCalendar, toCalendar} from '@internationalized/date';\nimport {convertValue, createPlaceholderDate, FieldOptions, getFormatOptions, isInvalid, useDefaultProps} from './utils';\nimport {DatePickerProps, DateValue, Granularity} from '@react-types/datepicker';\nimport {getPlaceholder} from './placeholders';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport type SegmentType = 'era' | 'year' | 'month' | 'day' |  'hour' | 'minute' | 'second' | 'dayPeriod' | 'literal' | 'timeZoneName';\nexport interface DateSegment {\n  /** The type of segment. */\n  type: SegmentType,\n  /** The formatted text for the segment. */\n  text: string,\n  /** The numeric value for the segment, if applicable. */\n  value?: number,\n  /** The minimum numeric value for the segment, if applicable. */\n  minValue?: number,\n  /** The maximum numeric value for the segment, if applicable. */\n  maxValue?: number,\n  /** Whether the value is a placeholder. */\n  isPlaceholder: boolean,\n  /** A placeholder string for the segment. */\n  placeholder: string,\n  /** Whether the segment is editable. */\n  isEditable: boolean\n}\n\nexport interface DateFieldState {\n  /** The current field value. */\n  value: DateValue,\n  /** The current value, converted to a native JavaScript `Date` object.  */\n  dateValue: Date,\n  /** The calendar system currently in use. */\n  calendar: Calendar,\n  /** Sets the field's value. */\n  setValue(value: DateValue): void,\n  /** A list of segments for the current value. */\n  segments: DateSegment[],\n  /** A date formatter configured for the current locale and format. */\n  dateFormatter: DateFormatter,\n  /** The current validation state of the date field, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** The maximum date or time unit that is displayed in the field. */\n  maxGranularity: 'year' | 'month' | Granularity,\n  /** Whether the field is disabled. */\n  isDisabled: boolean,\n  /** Whether the field is read only. */\n  isReadOnly: boolean,\n  /** Whether the field is required. */\n  isRequired: boolean,\n  /** Increments the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  increment(type: SegmentType): void,\n  /** Decrements the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  decrement(type: SegmentType): void,\n  /**\n   * Increments the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to increment by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  incrementPage(type: SegmentType): void,\n  /**\n   * Decrements the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to decrement by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  decrementPage(type: SegmentType): void,\n  /** Sets the value of the given segment. */\n  setSegment(type: 'era', value: string): void,\n  setSegment(type: SegmentType, value: number): void,\n  /** Updates the remaining unfilled segments with the placeholder value. */\n  confirmPlaceholder(): void,\n  /** Clears the value of the given segment, reverting it to the placeholder. */\n  clearSegment(type: SegmentType): void,\n  /** Formats the current date value using the given options. */\n  formatValue(fieldOptions: FieldOptions): string\n}\n\nconst EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\n\nconst PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n\n// Node seems to convert everything to lowercase...\nconst TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nexport interface DateFieldStateOptions extends DatePickerProps<DateValue> {\n  /**\n   * The maximum unit to display in the date field.\n   * @default 'year'\n   */\n  maxGranularity?: 'year' | 'month' | Granularity,\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar\n}\n\n/**\n * Provides state management for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateFieldState(props: DateFieldStateOptions): DateFieldState {\n  let {\n    locale,\n    createCalendar,\n    hideTimeZone,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  } = props;\n\n  let v: DateValue = (props.value || props.defaultValue || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let defaultFormatter = useMemo(() => new DateFormatter(locale), [locale]);\n  let calendar = useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n\n  let [value, setDate] = useControlledState<DateValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let calendarValue = useMemo(() => convertValue(value, calendar), [value, calendar]);\n\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = useState(\n    () => createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n  );\n\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra\n  }), [props.maxGranularity, granularity, props.hourCycle, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = useMemo(() => getFormatOptions({}, formatOpts), [formatOpts]);\n\n  let dateFormatter = useMemo(() => new DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments: Partial<typeof EDITABLE_SEGMENTS> = useMemo(() =>\n    dateFormatter.formatToParts(new Date())\n      .filter(seg => EDITABLE_SEGMENTS[seg.type])\n      .reduce((p, seg) => (p[seg.type] = true, p), {})\n  , [dateFormatter]);\n\n  let [validSegments, setValidSegments] = useState<Partial<typeof EDITABLE_SEGMENTS>>(\n    () => props.value || props.defaultValue ? {...allSegments} : {}\n  );\n\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = useRef(calendar.identifier);\n  useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder =>\n        Object.keys(validSegments).length > 0\n          ? toCalendar(placeholder, calendar)\n          : createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n      );\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {...allSegments};\n    setValidSegments(validSegments);\n  }\n\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = (newValue: DateValue) => {\n    if (props.isDisabled || props.isReadOnly) {\n      return;\n    }\n\n    if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, v?.calendar || new GregorianCalendar());\n      setDate(newValue);\n    } else {\n      setPlaceholderDate(newValue);\n    }\n  };\n\n  let dateValue = useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = useMemo(() =>\n    dateFormatter.formatToParts(dateValue)\n      .map(segment => {\n        let isEditable = EDITABLE_SEGMENTS[segment.type];\n        if (segment.type === 'era' && calendar.getEras().length === 1) {\n          isEditable = false;\n        }\n\n        let isPlaceholder = EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n        let placeholder = EDITABLE_SEGMENTS[segment.type] ? getPlaceholder(segment.type, segment.value, locale) : null;\n        return {\n          type: TYPE_MAPPING[segment.type] || segment.type,\n          text: isPlaceholder ? placeholder : segment.value,\n          ...getSegmentLimits(displayValue, segment.type, resolvedOptions),\n          isPlaceholder,\n          placeholder,\n          isEditable\n        } as DateSegment;\n      })\n  , [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({...validSegments});\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({...validSegments});\n  }\n\n  let markValid = (part: Intl.DateTimeFormatPartTypes) => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) {\n      validSegments.era = true;\n    }\n    setValidSegments({...validSegments});\n  };\n\n  let adjustSegment = (type: Intl.DateTimeFormatPartTypes, amount: number) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {\n        setValue(displayValue);\n      }\n    } else {\n      setValue(addSegment(displayValue, type, amount, resolvedOptions));\n    }\n  };\n\n  let validationState: ValidationState = props.validationState ||\n    (isInvalid(calendarValue, props.minValue, props.maxValue) ? 'invalid' : null);\n\n  return {\n    value: calendarValue,\n    dateValue,\n    calendar,\n    setValue,\n    segments,\n    dateFormatter,\n    validationState,\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -(PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue(setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) {\n        return;\n      }\n\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {...allSegments};\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      setValidSegments({...validSegments});\n\n      let placeholder = createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour - 12});\n        } else if (!isPM && shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour + 12});\n        }\n      } else if (part in displayValue) {\n        value = displayValue.set({[part]: placeholder[part]});\n      }\n\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions: FieldOptions) {\n      if (!calendarValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\nfunction getSegmentLimits(date: DateValue, type: string, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (type) {\n    case 'era': {\n      let eras = date.calendar.getEras();\n      return {\n        value: eras.indexOf(date.era),\n        minValue: 0,\n        maxValue: eras.length - 1\n      };\n    }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) {\n    switch (type) {\n      case 'dayPeriod':\n        return {\n          value: date.hour >= 12 ? 12 : 0,\n          minValue: 0,\n          maxValue: 12\n        };\n      case 'hour':\n        if (options.hour12) {\n          let isPM = date.hour >= 12;\n          return {\n            value: date.hour,\n            minValue: isPM ? 12 : 0,\n            maxValue: isPM ? 23 : 11\n          };\n        }\n\n        return {\n          value: date.hour,\n          minValue: 0,\n          maxValue: 23\n        };\n      case 'minute':\n        return {\n          value: date.minute,\n          minValue: 0,\n          maxValue: 59\n        };\n      case 'second':\n        return {\n          value: date.second,\n          minValue: 0,\n          maxValue: 59\n        };\n    }\n  }\n\n  return {};\n}\n\nfunction addSegment(value: DateValue, part: string, amount: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {round: part === 'year'});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({hour: isPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return value.cycle(part, amount, {\n          round: part !== 'hour',\n          hourCycle: options.hour12 ? 12 : 24\n        });\n    }\n  }\n}\n\nfunction setSegment(value: DateValue, part: string, segmentValue: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({[part]: segmentValue});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) {\n          return value;\n        }\n        return value.set({hour: wasPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n        // In 12 hour time, ensure that AM/PM does not change\n        if (options.hour12) {\n          let hours = value.hour;\n          let wasPM = hours >= 12;\n          if (!wasPM && segmentValue === 12) {\n            segmentValue = 0;\n          }\n          if (wasPM && segmentValue < 12) {\n            segmentValue += 12;\n          }\n        }\n        // fallthrough\n      case 'minute':\n      case 'second':\n        return value.set({[part]: segmentValue});\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DateRange, DateRangePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, isInvalid, useDefaultProps} from './utils';\nimport {RangeValue, ValidationState} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface DateRangePickerStateOptions extends DateRangePickerProps<DateValue> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\ntype TimeRange = RangeValue<TimeValue>;\nexport interface DateRangePickerState {\n  /** The currently selected date range. */\n  value: DateRange,\n  /** Sets the selected date range. */\n  setValue(value: DateRange): void,\n  /**\n   * The date portion of the selected range. This may be set prior to `value` if the user has\n   * selected a date range but has not yet selected a time range.\n   */\n  dateRange: DateRange,\n  /** Sets the date portion of the selected range. */\n  setDateRange(value: DateRange): void,\n  /**\n   * The time portion of the selected range. This may be set prior to `value` if the user has\n   * selected a time range but has not yet selected a date range.\n   */\n  timeRange: TimeRange,\n  /** Sets the time portion of the selected range. */\n  setTimeRange(value: TimeRange): void,\n  /** Sets the date portion of either the start or end of the selected range. */\n  setDate(part: 'start' | 'end', value: DateValue): void,\n  /** Sets the time portion of either the start or end of the selected range. */\n  setTime(part: 'start' | 'end', value: TimeValue): void,\n  /** Sets the date and time of either the start or end of the selected range. */\n  setDateTime(part: 'start' | 'end', value: DateValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date range picker supports selecting times, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /** The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** Formats the selected range using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): {start: string, end: string}\n}\n\n/**\n * Provides state management for a date range picker component.\n * A date range picker combines two DateFields and a RangeCalendar popover to allow\n * users to enter or select a date and time range.\n */\nexport function useDateRangePickerState(props: DateRangePickerStateOptions): DateRangePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [controlledValue, setControlledValue] = useControlledState<DateRange>(props.value, props.defaultValue || null, props.onChange);\n  let [placeholderValue, setPlaceholderValue] = useState(() => controlledValue || {start: null, end: null});\n\n  // Reset the placeholder if the value prop is set to null.\n  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n    placeholderValue = {start: null, end: null};\n    setPlaceholderValue(placeholderValue);\n  }\n\n  let value = controlledValue || placeholderValue;\n\n  let setValue = (value: DateRange) => {\n    setPlaceholderValue(value);\n    if (value?.start && value.end) {\n      setControlledValue(value);\n    } else {\n      setControlledValue(null);\n    }\n  };\n\n  let v = (value?.start || value?.end || props.placeholderValue);\n  let [granularity] = useDefaultProps(v, props.granularity);\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second' || granularity === 'millisecond';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [dateRange, setSelectedDateRange] = useState<DateRange>(null);\n  let [timeRange, setSelectedTimeRange] = useState<TimeRange>(null);\n\n  if (value && value.start && value.end) {\n    dateRange = value;\n    if ('hour' in value.start) {\n      timeRange = value as TimeRange;\n    }\n  }\n\n  let commitValue = (dateRange: DateRange, timeRange: TimeRange) => {\n    setValue({\n      start: 'timeZone' in timeRange.start ? timeRange.start.set(toCalendarDate(dateRange.start)) : toCalendarDateTime(dateRange.start, timeRange.start),\n      end: 'timeZone' in timeRange.end ? timeRange.end.set(toCalendarDate(dateRange.end)) : toCalendarDateTime(dateRange.end, timeRange.end)\n    });\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let setDateRange = (range: DateRange) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (shouldClose || (range.start && range.end && timeRange?.start && timeRange?.end)) {\n        commitValue(range, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      } else {\n        setSelectedDateRange(range);\n      }\n    } else if (range.start && range.end) {\n      setValue(range);\n    } else {\n      setSelectedDateRange(range);\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let setTimeRange = (range: TimeRange) => {\n    if (dateRange?.start && dateRange?.end && range.start && range.end) {\n      commitValue(dateRange, range);\n    } else {\n      setSelectedTimeRange(range);\n    }\n  };\n\n  let validationState: ValidationState = props.validationState\n    || (value != null && (\n      isInvalid(value.start, props.minValue, props.maxValue) ||\n      isInvalid(value.end, props.minValue, props.maxValue) ||\n      (value.end != null && value.start != null && value.end.compare(value.start) < 0) ||\n      (value?.start && props.isDateUnavailable?.(value.start)) ||\n      (value?.end && props.isDateUnavailable?.(value.end))\n    ) ? 'invalid' : null);\n\n  return {\n    value,\n    setValue,\n    dateRange,\n    timeRange,\n    granularity,\n    hasTime,\n    setDate(part, date) {\n      setDateRange({...dateRange, [part]: date});\n    },\n    setTime(part, time) {\n      setTimeRange({...timeRange, [part]: time});\n    },\n    setDateTime(part, dateTime) {\n      setValue({...value, [part]: dateTime});\n    },\n    setDateRange,\n    setTimeRange,\n    isOpen: overlayState.isOpen,\n    setOpen(isOpen) {\n      // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time range was set and not the date range, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !(value?.start && value?.end) && dateRange?.start && dateRange?.end && hasTime) {\n        commitValue(dateRange, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    formatValue(locale, fieldOptions) {\n      if (!value || !value.start || !value.end) {\n        return null;\n      }\n\n      let startTimeZone = 'timeZone' in value.start ? value.start.timeZone : undefined;\n      let startGranularity = props.granularity || (value.start && 'minute' in value.start ? 'minute' : 'day');\n      let endTimeZone = 'timeZone' in value.end ? value.end.timeZone : undefined;\n      let endGranularity = props.granularity || (value.end && 'minute' in value.end ? 'minute' : 'day');\n\n      let startOptions = getFormatOptions(fieldOptions, {\n        granularity: startGranularity,\n        timeZone: startTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: (value.start.calendar.identifier === 'gregory' && value.start.era === 'BC') ||\n          (value.end.calendar.identifier === 'gregory' && value.end.era === 'BC')\n      });\n\n      let startDate = value.start.toDate(startTimeZone || 'UTC');\n      let endDate = value.end.toDate(endTimeZone || 'UTC');\n\n      let startFormatter = new DateFormatter(locale, startOptions);\n      let endFormatter: Intl.DateTimeFormat;\n      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {\n        // Use formatRange, as it results in shorter output when some of the fields\n        // are shared between the start and end dates (e.g. the same month).\n        // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n        try {\n          let parts = startFormatter.formatRangeToParts(startDate, endDate);\n\n          // Find the separator between the start and end date. This is determined\n          // by finding the last shared literal before the end range.\n          let separatorIndex = -1;\n          for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.source === 'shared' && part.type === 'literal') {\n              separatorIndex = i;\n            } else if (part.source === 'endRange') {\n              break;\n            }\n          }\n\n          // Now we can combine the parts into start and end strings.\n          let start = '';\n          let end = '';\n          for (let i = 0; i < parts.length; i++) {\n            if (i < separatorIndex) {\n              start += parts[i].value;\n            } else if (i > separatorIndex) {\n              end += parts[i].value;\n            }\n          }\n\n          return {start, end};\n        } catch (e) {\n          // ignore\n        }\n\n        endFormatter = startFormatter;\n      } else {\n        let endOptions = getFormatOptions(fieldOptions, {\n          granularity: endGranularity,\n          timeZone: endTimeZone,\n          hideTimeZone: props.hideTimeZone,\n          hourCycle: props.hourCycle\n        });\n\n        endFormatter = new DateFormatter(locale, endOptions);\n      }\n\n      return {\n        start: startFormatter.format(startDate),\n        end: endFormatter.format(endDate)\n      };\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFieldState, useDateFieldState} from '.';\nimport {DateValue, TimePickerProps, TimeValue} from '@react-types/datepicker';\nimport {getLocalTimeZone, GregorianCalendar, Time, toCalendarDateTime, today, toTime} from '@internationalized/date';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface TimeFieldStateOptions extends TimePickerProps<TimeValue> {\n  /** The locale to display and edit the value according to. */\n  locale: string\n}\n\n/**\n * Provides state management for a time field component.\n * A time field allows users to enter and edit time values using a keyboard.\n * Each part of a time value is displayed in an individually editable segment.\n */\nexport function useTimeFieldState(props: TimeFieldStateOptions): DateFieldState {\n  let {\n    placeholderValue = new Time(),\n    minValue,\n    maxValue,\n    granularity\n  } = props;\n\n  let [value, setValue] = useControlledState<TimeValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let placeholderDate = useMemo(() => convertValue(placeholderValue), [placeholderValue]);\n  let minDate = useMemo(() => convertValue(minValue, day), [minValue, day]);\n  let maxDate = useMemo(() => convertValue(maxValue, day), [maxValue, day]);\n\n  let dateTime = useMemo(() => value == null ? null : convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(v && 'day' in v ? newValue : newValue && toTime(newValue));\n  };\n\n  return useDateFieldState({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new GregorianCalendar()\n  });\n}\n\nfunction convertValue(value: TimeValue, date: DateValue = today(getLocalTimeZone())) {\n  if (!value) {\n    return null;\n  }\n\n  if ('day' in value) {\n    return value;\n  }\n\n  return toCalendarDateTime(date, value);\n}\n"]},"metadata":{},"sourceType":"module"}