{"ast":null,"code":"var _jsxFileName = \"/Users/rai/Desktop/go-packing-project/src/components/location/Location.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport \"./Location.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*#__PURE__*/\n_jsxDEV(\"link\", {\n  rel: \"stylesheet\",\n  href: \"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 1\n}, this);\n\nconst Location = props => {\n  _s();\n\n  const [coordinates, setCoordinates] = useState(null); // Call storeCoordinates function from Home.js on every render\n\n  useEffect(() => {\n    props.storeCoordinates(coordinates); // props.weatherApiCall(locationCoordinates);\n  }); // Set coordinates state on date change\n\n  const handleOnChange = location => {\n    setCoordinates(location);\n  };\n\n  const loadOptions = inputValue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=100000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"$#e8b6;Search for city\",\n    theme: theme => ({ ...theme,\n      borderRadius: \"25px 0px 0px 25px\"\n    }),\n    debounceTimeout: 600,\n    value: coordinates,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Location, \"NYagvTsY0KW8OqYwzt5HLaBmVbk=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["useEffect","useState","AsyncPaginate","GEO_API_URL","geoApiOptions","Location","props","coordinates","setCoordinates","storeCoordinates","handleOnChange","location","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","error","theme","borderRadius"],"sources":["/Users/rai/Desktop/go-packing-project/src/components/location/Location.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport \"./Location.css\";\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\n\nconst Location = (props) => {\n  const [coordinates, setCoordinates] = useState(null);\n\n  // Call storeCoordinates function from Home.js on every render\n  useEffect(() => {\n    props.storeCoordinates(coordinates);\n    // props.weatherApiCall(locationCoordinates);\n  });\n\n  // Set coordinates state on date change\n  const handleOnChange = (location) => {\n    setCoordinates(location);\n  };\n\n  const loadOptions = (inputValue) => {\n    return fetch(\n      `${GEO_API_URL}/cities?minPopulation=100000&namePrefix=${inputValue}`,\n      geoApiOptions\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        return {\n          options: response.data.map((city) => {\n            return {\n              value: `${city.latitude} ${city.longitude}`,\n              label: `${city.name}, ${city.countryCode}`,\n            };\n          }),\n        };\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"$#e8b6;Search for city\"\n      theme={(theme) => ({\n        ...theme,\n        borderRadius: \"25px 0px 0px 25px\",\n      })}\n      debounceTimeout={600}\n      value={coordinates}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Location;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,WAA3C;AACA,OAAO,gBAAP;;;AACA;AAAA;EAAM,GAAG,EAAC,YAAV;EAAuB,IAAI,EAAC;AAA5B;EAAA;EAAA;EAAA;AAAA;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C,CAD0B,CAG1B;;EACAD,SAAS,CAAC,MAAM;IACdM,KAAK,CAACG,gBAAN,CAAuBF,WAAvB,EADc,CAEd;EACD,CAHQ,CAAT,CAJ0B,CAS1B;;EACA,MAAMG,cAAc,GAAIC,QAAD,IAAc;IACnCH,cAAc,CAACG,QAAD,CAAd;EACD,CAFD;;EAIA,MAAMC,WAAW,GAAIC,UAAD,IAAgB;IAClC,OAAOC,KAAK,CACT,GAAEX,WAAY,2CAA0CU,UAAW,EAD1D,EAEVT,aAFU,CAAL,CAIJW,IAJI,CAIEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJf,EAKJF,IALI,CAKEC,QAAD,IAAc;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAU;UACnC,OAAO;YACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EADrC;YAELC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;UAFpC,CAAP;QAID,CALQ;MADJ,CAAP;IAQD,CAdI,EAeJC,KAfI,CAeGC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAfX,CAAP;EAgBD,CAjBD;;EAmBA,oBACE,QAAC,aAAD;IACE,WAAW,EAAC,wBADd;IAEE,KAAK,EAAGG,KAAD,KAAY,EACjB,GAAGA,KADc;MAEjBC,YAAY,EAAE;IAFG,CAAZ,CAFT;IAME,eAAe,EAAE,GANnB;IAOE,KAAK,EAAE1B,WAPT;IAQE,QAAQ,EAAEG,cARZ;IASE,WAAW,EAAEE;EATf;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA9CD;;GAAMP,Q;;KAAAA,Q;AAgDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}