{"ast":null,"code":"import { useSingleSelectListState as $ijHKZ$useSingleSelectListState } from \"@react-stately/list\";\nimport { useRef as $ijHKZ$useRef } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $76f919a04c5a7d14$exports = {};\n$parcel$export($76f919a04c5a7d14$exports, \"useTabListState\", () => $76f919a04c5a7d14$export$4ba071daf4e486);\n\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  let state = $ijHKZ$useSingleSelectListState({ ...props,\n    suppressTextValueWarning: true\n  });\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    selectedKey: currentSelectedKey\n  } = state;\n  let lastSelectedKey = $ijHKZ$useRef(currentSelectedKey); // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n\n  let selectedKey = currentSelectedKey;\n\n  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n    selectedKey = collection.getFirstKey(); // loop over tabs until we find one that isn't disabled and select that\n\n    while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) selectedKey = collection.getKeyAfter(selectedKey); // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n\n\n    if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey(); // directly set selection because replace/toggle selection won't consider disabled keys\n\n    selectionManager.setSelectedKeys([selectedKey]);\n  } // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n\n\n  if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n  lastSelectedKey.current = selectedKey;\n  return state;\n}\n\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;SAuBgBA,wCAAkCC,OAAyC;EACzF,IAAIC,KAAK,GAAGC,+BAAwB,CAAI,KACnCF,KADmC;IAEtCG,wBAAwB,EAAE;EAFY,CAAJ,CAApC;EAKA,IAAI;IAACC,kBACHA,gBADE;IACcC,YAChBA,UAFE;IAGFC,WAAW,EAAEC;EAHX,IAIAN,KAJJ;EAMA,IAAIO,eAAe,GAAGC,aAAM,CAACF,kBAAD,CAA5B,CAZyF,CAazF;;EACA,IAAID,WAAW,GAAGC,kBAAlB;;EACA,IAAIH,gBAAgB,CAACM,OAAjB,IAAwB,CAAKL,UAAU,CAACM,OAAX,CAAmBL,WAAnB,CAAjC,EAAkE;IAChEA,WAAW,GAAGD,UAAU,CAACO,WAAX,EAAd,CADgE,CAEhE;;WACOX,KAAK,CAACY,YAAN,CAAmBC,GAAnB,CAAuBR,WAAvB,KAAuCA,WAAW,KAAKD,UAAU,CAACU,UAAX,IAC5DT,WAAW,GAAGD,UAAU,CAACW,WAAX,CAAuBV,WAAvB,CAAd,CAJ8D,CAMhE;;;IACA,IAAIL,KAAK,CAACY,YAAN,CAAmBC,GAAnB,CAAuBR,WAAvB,KAAuCA,WAAW,KAAKD,UAAU,CAACU,UAAX,EAA3D,EACET,WAAW,GAAGD,UAAU,CAACO,WAAX,EAAd,CAR8D,CAUhE;;IACAR,gBAAgB,CAACa,eAAjB,CAAiC,CAACX,WAAD,CAAjC;EACD,CA3BwF,CA6BzF;;;EACA,IAAIF,gBAAgB,CAACc,UAAjB,IAA+B,IAA/B,IAAmC,CAAMd,gBAAgB,CAACe,SAAvB,IAAoCb,WAAW,KAAKE,eAAe,CAACY,OAA3G,EACEhB,gBAAgB,CAACiB,aAAjB,CAA+Bf,WAA/B;EAEFE,eAAe,CAACY,OAAhB,GAA0Bd,WAA1B;EAEA,OAAOL,KAAP;AACD","names":["$76f919a04c5a7d14$export$4ba071daf4e486","props","state","$ijHKZ$useSingleSelectListState","suppressTextValueWarning","selectionManager","collection","selectedKey","currentSelectedKey","lastSelectedKey","$ijHKZ$useRef","isEmpty","getItem","getFirstKey","disabledKeys","has","getLastKey","getKeyAfter","setSelectedKeys","focusedKey","isFocused","current","setFocusedKey"],"sources":["/Users/rai/Desktop/go-packing-project/node_modules/@react-stately/tabs/dist/packages/@react-stately/tabs/src/useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useRef} from 'react';\n\n\nexport interface TabListState<T> extends SingleSelectListState<T> {}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListProps<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n  let selectedKey = currentSelectedKey;\n  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) {\n      selectedKey = collection.getKeyAfter(selectedKey);\n    }\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) {\n      selectedKey = collection.getFirstKey();\n    }\n    // directly set selection because replace/toggle selection won't consider disabled keys\n    selectionManager.setSelectedKeys([selectedKey]);\n  }\n\n  // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n  if (selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n    selectionManager.setFocusedKey(selectedKey);\n  }\n  lastSelectedKey.current = selectedKey;\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}